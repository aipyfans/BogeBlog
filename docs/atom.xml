<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>静水流深</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lijunbo.com/"/>
  <updated>2019-10-08T10:39:52.115Z</updated>
  <id>http://blog.lijunbo.com/</id>
  
  <author>
    <name>William-Dream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Studio PluginManager$StartupAbortedException 异常解决方案(Mac平台)</title>
    <link href="http://blog.lijunbo.com/2018/08/03/plugin_error/"/>
    <id>http://blog.lijunbo.com/2018/08/03/plugin_error/</id>
    <published>2018-08-03T14:11:00.000Z</published>
    <updated>2019-10-08T10:39:52.115Z</updated>
    
    <content type="html"><![CDATA[<p>这是自己亲自动手解决的首个 Android Studio 异常，网上的方案大都是人云亦云，没有自己的思考</p><blockquote><p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000125550-Android-Studio-3-0-1-won-t-start-up-accidentally-reverted-something-during-an-update-" target="_blank" rel="noopener">java.lang.RuntimeException: com.intellij.ide.plugins.PluginManager$StartupAbortedException: Fatal error initializing</a> </p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>我们从上面的异常名称来分析一下：</p><p><code>PluginManager$StartupAbortedException</code> 见名知意：由于<code>插件管理</code>导致的启动终止</p><ol><li>最近有没有添加一些新的插件？</li><li>有没有异常关机的情况？</li></ol><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>既然找到原因了，我们就要动手解决一下：</p><ol><li>暴力方案：找到插件所在的文件夹，将整个插件文件夹删除</li><li>优雅方案：知道自己最近安装了哪些插件，删除指定的插件</li></ol><blockquote><p>出现此异常大多都是因为我们安装了第三方插件导致的不兼容异常</p></blockquote><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ol><li><p>Android Studio 【第三方插件】所在的文件夹路径【出现上面的异常，一般情况下，操作此文件夹】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/william/Library/Application Support/AndroidStudio3.1</span><br></pre></td></tr></table></figure></li><li><p>Android Studio 【内置插件】所在的文件夹路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Android Studio.app/Contents/plugins</span><br></pre></td></tr></table></figure></li><li><p>Android Studio IDE 【程序】所在的文件夹路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Android Studio.app/Contents</span><br></pre></td></tr></table></figure></li><li><p>Android Studio IDE 【配置】所在的文件夹路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/william/Library/Preferences/AndroidStudio3.1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是自己亲自动手解决的首个 Android Studio 异常，网上的方案大都是人云亦云，没有自己的思考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/communi
      
    
    </summary>
    
      <category term="android" scheme="http://blog.lijunbo.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>写给女儿的歌词-Cover《成都》</title>
    <link href="http://blog.lijunbo.com/2018/07/30/my-daughter-song/"/>
    <id>http://blog.lijunbo.com/2018/07/30/my-daughter-song/</id>
    <published>2018-07-30T14:11:00.000Z</published>
    <updated>2019-10-08T10:39:52.115Z</updated>
    
    <content type="html"><![CDATA[<p>让我掉下眼泪的    不止送嫁的酒</p><p>让我依依不舍的    不止你的眼眸</p><p>余生路要走很久    他攒着你的手</p><p>让我心有不甘的    是放手的自由</p><p>回忆总是在深夜    忍不住冒出了头</p><p>将你稚嫩的温柔    托在我的肩头</p><p>在这个温馨的小家里    我一直呵护你</p><p>女儿        放不下的        只有你</p><p>和我在你儿时的街头走一走    </p><p>直到所有的回忆都淡了也别逗留</p><p>你会挽着我的衣袖        我想牵着你的小手</p><p>笑着向你挥一挥手        坐在等你的家门口    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让我掉下眼泪的    不止送嫁的酒&lt;/p&gt;
&lt;p&gt;让我依依不舍的    不止你的眼眸&lt;/p&gt;
&lt;p&gt;余生路要走很久    他攒着你的手&lt;/p&gt;
&lt;p&gt;让我心有不甘的    是放手的自由&lt;/p&gt;
&lt;p&gt;回忆总是在深夜    忍不住冒出了头&lt;/p&gt;
&lt;p&gt;将你稚嫩的温柔    
      
    
    </summary>
    
      <category term="diary" scheme="http://blog.lijunbo.com/categories/diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Lokijs 中文文档</title>
    <link href="http://blog.lijunbo.com/2018/05/03/lokijs_index/"/>
    <id>http://blog.lijunbo.com/2018/05/03/lokijs_index/</id>
    <published>2018-05-03T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.115Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs1_overview/">Home</a></li><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs2_index_query/">Indexing and Performance</a></li><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs3_query_examples/">Query Examples</a></li><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs4_changes_api/">Changes API</a></li><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs5_persistence_adapters/">Persistence and Adapters</a></li><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs6_collection_transforms/">Collection Transforms</a></li><li><a href="https://blog.lijunbo.com/2018/05/02/lokijs7_autoupdating_collections/">Autoupdating Collections</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.lijunbo.com/2018/05/02/lokijs1_overview/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.lijunbo.com/2018/05/02/loki
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>API的变化</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs4_changes_api/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs4_changes_api/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>LokiJS 1.1 introduces a “Changes API” that enables the user to keep track of the changes happened to each collection since a particular point in time, which is usually the start of a work session but it could be a user defined one. This is particularly useful for remote synchronization.</p><h2 id="Description-of-the-Changes-API"><a href="#Description-of-the-Changes-API" class="headerlink" title="Description of the Changes API"></a>Description of the Changes API</h2><p>The Changes API is a collection-level feature, hence you can establish which collections may simply contain volatile data and which ones need to keep a record of what has changed.</p><p>The Changes API is an optional feature and can be activated/deactivated by either passing the option <code>{ disableChangesApi: isDisabled }</code> in the config parameter of a collection constructor, or by calling <code>collection.setChangesApi(isEnabled)</code>. Note that LokiJS will always set the fastest performing setting as default on a collection or database, hence the Changes API is <strong>disabled</strong> by default.</p><p>There are three events which will trigger a Changes API operation: inserts, updates and deletes. When either of these events occur, on a collection with Changes API activated, the collection will store a snapshot of the relevant object, associated with the operation and the name of the collection.</p><p>From the database object it is then possible to invoke the <code>serializeChanges</code> method which will generate a string representation of the changes occurred to be used for synchronization purposes.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>To enable the Changes API make sure to either instantiate a collection using <code>db.addCollection(&#39;users&#39;, { disableChangesApi: false })</code>, or call <code>users.setChangesApi(true)</code> (given an example <code>users</code> collection).</p><p>To generate a string representation of the changes, call <code>db.serializeChanges()</code>. This will generate a representation of all the changes for those collections that have the Changes API enabled. If you are only interested in generating changes for a subset of collections, you can pass an array of names of the collections, i.e. <code>db.serializeChanges([&#39;users&#39;]);</code>.</p><p>To clear all the changes, call <code>db.clearChanges()</code>. Alternatively you can call <code>flushChanges()</code> on the single collection, normally you would call <code>db.clearChanges()</code> on a callback from a successful synchronization operation.</p><p>Each change is an object with three properties: <code>name</code> is the collection name, <code>obj</code> is the string representation of the object and <code>operation</code> is a character representing the operation (“I” for insert, “U” for update, “R” for remove). So for example, inserting user <code>{ name: &#39;joe&#39; }</code> in the users collection would generate a change <code>{ name: &#39;users&#39;, obj: { name: &#39;joe&#39; }, operation: &#39;I&#39; }</code>. Changes are kept in order of how the happened so a 3rd party application will be able to operate insert updates and deletes in the correct order.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;LokiJS 1.1 introduces a “Changes API” that ena
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>LokiJS 持久化以及适配器</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs5_persistence_adapters/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs5_persistence_adapters/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>LokiJS持久化是通过适配器接口实现的。我们支持<code>自动保存</code>和<code>自动加载</code>选项，简单的<code>键/值</code>适配器以及<code>参考模式</code>的适配器，并且现在支持各种结构化序列化方法，可以轻松创建自己的持久化适配器以及批量或流式数据交换。</p><p>像<code>lokijs</code>这样的内存数据库和传统数据库系统之间的一个重要区别是，所有文档/记录都保存在内存中，并且不会根据需要加载。因此持久化仅用于<code>保存和恢复</code>这个内存数据库的状态。</p><blockquote><p>如果您的数据库足够小，并且您希望尝试，则可以调用<code>db.serialize()</code>以返回完整序列化的数据库，并将其加载到另一个数据库实例中，如<code>dbcopy.loadJSON(str)</code>。</p></blockquote><h1 id="Node-js-快速开始"><a href="#Node-js-快速开始" class="headerlink" title="Node.js 快速开始"></a>Node.js 快速开始</h1><p>If you are using lokijs in a node environment, we will automatically detect and use the built-in LokiFsAdapter without your needing to provide an adapter.</p><h3 id="No-Persistence-example-entirely-synchronous-and-in-memory"><a href="#No-Persistence-example-entirely-synchronous-and-in-memory" class="headerlink" title="No Persistence example (entirely synchronous and in memory) :"></a>No Persistence example (entirely synchronous and in memory) :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loki = <span class="built_in">require</span>(<span class="string">"lokijs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> loki(<span class="string">"quickstart.db"</span>);</span><br><span class="line"><span class="keyword">var</span> users = db.addCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">users.insert(&#123;<span class="attr">name</span>:<span class="string">'odin'</span>, <span class="attr">age</span>: <span class="number">50</span>&#125;);</span><br><span class="line">users.insert(&#123;<span class="attr">name</span>:<span class="string">'thor'</span>, <span class="attr">age</span>: <span class="number">35</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = users.find(&#123; <span class="attr">age</span> : &#123; <span class="attr">$lte</span>: <span class="number">35</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dumps array with 1 doc (thor) to console</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="Autosave-autoload-quickstart-with-default-LokiFsAdapter-async-i-o"><a href="#Autosave-autoload-quickstart-with-default-LokiFsAdapter-async-i-o" class="headerlink" title="Autosave/autoload quickstart with default LokiFsAdapter (async i/o) :"></a>Autosave/autoload quickstart with default LokiFsAdapter (async i/o) :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> loki(<span class="string">'quickstart.db'</span>, &#123;</span><br><span class="line">autoload: <span class="literal">true</span>,</span><br><span class="line">autoloadCallback : databaseInitialize,</span><br><span class="line">autosave: <span class="literal">true</span>, </span><br><span class="line">autosaveInterval: <span class="number">4000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement the autoloadback referenced in loki constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">databaseInitialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> entries = db.getCollection(<span class="string">"entries"</span>);</span><br><span class="line">  <span class="keyword">if</span> (entries === <span class="literal">null</span>) &#123;</span><br><span class="line">    entries = db.addCollection(<span class="string">"entries"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// kick off any program logic or start listening to external events</span></span><br><span class="line">  runProgramLogic();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example method with any bootstrap logic to run after database initialized</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runProgramLogic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> entryCount = db.getCollection(<span class="string">"entries"</span>).count();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"number of entries in database : "</span> + entryCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you expect your database to grow over 100mb or you experience slow save speeds you might to use our more high-performance LokiFsStructuredAdapter. This adapter utilitizes es6 generator iterators and node streams to stream the database line by line. It will also save each collection into its own file (partitioned) with a file name derived from the base name. This database should scale to support databases just under 1 gb on the default node heap allocation of 1.4gb. Increasing heap allocation, you can push this limit further.</p><h3 id="An-example-using-fastest-and-most-scalable-LokiFsStructuredAdapter-for-nodejs-might-look-like"><a href="#An-example-using-fastest-and-most-scalable-LokiFsStructuredAdapter-for-nodejs-might-look-like" class="headerlink" title="An example using fastest and most scalable LokiFsStructuredAdapter (for nodejs) might look like :"></a>An example using fastest and most scalable LokiFsStructuredAdapter (for nodejs) might look like :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loki = <span class="built_in">require</span>(<span class="string">"lokijs"</span>);</span><br><span class="line"><span class="keyword">const</span> lfsa = <span class="built_in">require</span>(<span class="string">'../src/loki-fs-structured-adapter.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> adapter = <span class="keyword">new</span> lfsa();</span><br><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> loki(<span class="string">'sandbox.db'</span>, &#123; </span><br><span class="line">  adapter : adapter,</span><br><span class="line">  autoload: <span class="literal">true</span>,</span><br><span class="line">  autoloadCallback : databaseInitialize,</span><br><span class="line">  autosave: <span class="literal">true</span>, </span><br><span class="line">  autosaveInterval: <span class="number">4000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">databaseInitialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> log = db.getCollection(<span class="string">"log"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (log === <span class="literal">null</span>) &#123;</span><br><span class="line">    db.addCollection(<span class="string">"log"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// log some random event data as part of our example</span></span><br><span class="line">  log.insert(&#123; <span class="attr">event</span>: <span class="string">'dbinit'</span>, <span class="attr">dt</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Web-快速开始"><a href="#Web-快速开始" class="headerlink" title="Web 快速开始"></a>Web 快速开始</h1><p>If you are using lokijs in a web environment, we will automatically use the built-in LokiLocalStorageAdapter. This adapter is limited to around 5mb so that won’t last long but here is how to quickly get started experimenting with lokijs :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"../../src/lokijs.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Example-constructing-loki-for-in-memory-only-or-manual-save-load-with-default-localStorage-adapter"><a href="#Example-constructing-loki-for-in-memory-only-or-manual-save-load-with-default-localStorage-adapter" class="headerlink" title="Example constructing loki for in-memory only or manual save/load (with default localStorage adapter) :"></a>Example constructing loki for in-memory only or manual save/load (with default localStorage adapter) :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loki = <span class="keyword">new</span> loki(<span class="string">"test.db"</span>);</span><br></pre></td></tr></table></figure><h3 id="Example-constructing-loki-for-autoload-autosave-with-default-localStorage-adapter"><a href="#Example-constructing-loki-for-autoload-autosave-with-default-localStorage-adapter" class="headerlink" title="Example constructing loki for autoload/autosave (with default localStorage adapter) :"></a>Example constructing loki for autoload/autosave (with default localStorage adapter) :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> loki(<span class="string">"quickstart.db"</span>, &#123;</span><br><span class="line">  autoload: <span class="literal">true</span>,</span><br><span class="line">  autoloadCallback : databaseInitialize,</span><br><span class="line">  autosave: <span class="literal">true</span>, </span><br><span class="line">  autosaveInterval: <span class="number">4000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">databaseInitialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!db.getCollection(<span class="string">"users"</span>)) &#123;</span><br><span class="line">    db.addCollection(<span class="string">"users"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you expect your database to grow up to 60megs you might want to use our LokiIndexedAdapter which can save to IndexedDb, if your browser supports it.</p><h3 id="Example-using-more-scalable-LokiIndexedAdapter"><a href="#Example-using-more-scalable-LokiIndexedAdapter" class="headerlink" title="Example using more scalable LokiIndexedAdapter :"></a>Example using more scalable LokiIndexedAdapter :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../../src/lokijs.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../../src/loki-indexed-adapter.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new LokiIndexedAdapter();</span><br><span class="line">var db = new loki(&quot;test.db&quot;, &#123; </span><br><span class="line">  adapter: idbAdapter,</span><br><span class="line">  autoload: true,</span><br><span class="line">  autoloadCallback : databaseInitialize,</span><br><span class="line">  autosave: true, </span><br><span class="line">  autosaveInterval: 4000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>If you expect your database to grow over 60megs things start to get browser dependent. To provide singular guidance and since Chrome is the most popular web browser you will want to employ our LokiPartitioningAdapter in addition to our LokiIndexedAdapter. To sum up as briefly as possible, this will divide collections into their own files and if a collection exceeds 25megs (customizable) it will subdivide into separate pages(files). This allows our indexed db adapter to accomplish a single database save/load using many key/value pairs. This adapter will allow scaling up to around 300mb or so in current testing.</p><h3 id="An-example-using-the-LokiPartitioningAdapter-along-with-LokiIndexedAdapter-might-appear-as"><a href="#An-example-using-the-LokiPartitioningAdapter-along-with-LokiIndexedAdapter-might-appear-as" class="headerlink" title="An example using the LokiPartitioningAdapter along with LokiIndexedAdapter might appear as :"></a>An example using the LokiPartitioningAdapter along with LokiIndexedAdapter might appear as :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../../src/lokijs.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../../src/loki-indexed-adapter.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new LokiIndexedAdapter();</span><br><span class="line"></span><br><span class="line">// use paging only if you expect a single collection to be over 50 megs or so</span><br><span class="line">var pa = new loki.LokiPartitioningAdapter(idbAdapter, &#123; paging: true &#125;);</span><br><span class="line"></span><br><span class="line">var db = new loki(&apos;test.db&apos;, &#123; </span><br><span class="line">  adapter: pa,</span><br><span class="line">  autoload: true,</span><br><span class="line">  autoloadCallback : databaseInitialize,</span><br><span class="line">  autosave: true, </span><br><span class="line">  autosaveInterval: 4000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Description-of-LokiNativescriptAdapter"><a href="#Description-of-LokiNativescriptAdapter" class="headerlink" title="Description of LokiNativescriptAdapter"></a>Description of LokiNativescriptAdapter</h1><p>This adapter can be used when developing a nativescript application for iOS or Android, it persists the loki db to the filesystem using the native platform api.</p><h3 id="Simple-Example-of-using-LokiNativescriptAdapter"><a href="#Simple-Example-of-using-LokiNativescriptAdapter" class="headerlink" title="Simple Example of using LokiNativescriptAdapter :"></a>Simple Example of using LokiNativescriptAdapter :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const loki = require (&apos;lokijs&apos;);</span><br><span class="line">const LokiNativescriptAdapter = require(&apos;lokijs/src/loki-nativescript-adapter&apos;);</span><br><span class="line">let db = new loki(&apos;loki.json&apos;,&#123;</span><br><span class="line">            adapter:new LokiNativescriptAdapter()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>In addition to the above adapters which are included in the lokijs distro, several community members have also created their own adapters using this adapter interface. Some of these include :</p></blockquote><ul><li>Cordova adapter : <a href="https://github.com/cosmith/loki-cordova-fs-adapter" target="_blank" rel="noopener">https://github.com/cosmith/loki-cordova-fs-adapter</a></li><li>localForage adapter : <a href="https://github.com/paulhovey/loki-localforage-adapter" target="_blank" rel="noopener">https://github.com/paulhovey/loki-localforage-adapter</a></li></ul><h1 id="Configuring-persistence-adapters"><a href="#Configuring-persistence-adapters" class="headerlink" title="Configuring persistence adapters"></a>Configuring persistence adapters</h1><h2 id="Autosave-Autoload-and-close"><a href="#Autosave-Autoload-and-close" class="headerlink" title="Autosave, Autoload and close()"></a>Autosave, Autoload and close()</h2><p>LokiJS now supports automatic saving at user defined intervals, configured via loki constructor options. This is supported for all persistenceMethods. Data is only saved if changes have occurred since the last save. You can also specify an autoload to immediately load a saved database during new loki construction. If you need to process anything on load completion you can also specify your own autoloadCallback. Finally, in an autosave scenario, if the user wants to exit or is notified of leaving the webpage (window.onbeforeunload) you can call close() on the database which will perform a final save (if needed).</p><blockquote><p><strong>*Note : the ability of loki to ‘flush’ data on events such as a browsers onbeforeunload event, depends on the storage adapter being synchronous. Local storage and file system adapters are synchronous but indexeddb is asynchronous and cannot save when triggered from db.close() in an onbeforeunload event. The mouseleave event may allow enough time to perform a preemptive save.*</strong></p></blockquote><h3 id="Autosave-example"><a href="#Autosave-example" class="headerlink" title="Autosave example"></a>Autosave example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;loki&apos;);</span><br><span class="line">var db = new loki(&apos;test&apos;, </span><br><span class="line">  &#123;</span><br><span class="line">    autosave: true, </span><br><span class="line">    autosaveInterval: 10000, // 10 seconds</span><br><span class="line">    adapter: idbAdapter</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Autosave-with-autoload-example"><a href="#Autosave-with-autoload-example" class="headerlink" title="Autosave with autoload example"></a>Autosave with autoload example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new lokiIndexedAdapter(&apos;loki&apos;);</span><br><span class="line">var db = new loki(&apos;test.db&apos;, </span><br><span class="line">  &#123;</span><br><span class="line">    autoload: true,</span><br><span class="line">    autoloadCallback : loadHandler,</span><br><span class="line">    autosave: true, </span><br><span class="line">    autosaveInterval: 10000, // 10 seconds</span><br><span class="line">    adapter: idbAdapter</span><br><span class="line">  &#125;); </span><br><span class="line"></span><br><span class="line">function loadHandler() &#123;</span><br><span class="line">  // if database did not exist it will be empty so I will intitialize here</span><br><span class="line">  var coll = db.getCollection(&apos;entries&apos;);</span><br><span class="line">  if (coll === null) &#123;</span><br><span class="line">    coll = db.addCollection(&apos;entries&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://rawgit.com/techfort/LokiJS/master/examples/sandbox/LokiSandbox.htm#rawgist=https://gist.githubusercontent.com/obeliskos/447edca33d1274dd9a64767d23df56e9/raw/740d3bedc1ed76d3718acd207b6913281a11ed78/autoloadCallback" target="_blank" rel="noopener">Try in Loki Sandbox</a>.</p><h1 id="Save-throttling-and-persistence-contention-management"><a href="#Save-throttling-and-persistence-contention-management" class="headerlink" title="Save throttling and persistence contention management"></a>Save throttling and persistence contention management</h1><p>LokiJS now supports throttled saves and loads to avoid overlapping saveDatabase and loadDatabase calls from interfering with each other. This is controlled by a loki constructor option called ‘throttledSaves’ and the default for that option is ‘true’.</p><p>This means that within any single Loki database instance, multiple saves routed to the persistence adapter will be throttled and ensured to not conflict by overlap. With save throttling, during the time between an adapter save and an adapter response to that save, if new save requests come in we will queue those requests (and their callbacks) for a save which we will initiate immediately after the current save is complete. In that situation, if 10 requests to save had been made while a save is pending, the subsequent (single) save will callback all ten queued/tiered callbacks when -it- completes.</p><p>If a loadDatabase call occurs while a save is pending, we will (by default) wait indefinitely for the queue to deplete without being replenished. Once that occurs we will lock all saves during the load… any incoming save requests made while the database is being loaded will then be queued for saving once the load is completed. Since loadDatabase now internally calls a new ‘throttledSaveDrain’ we will pass through options to control that drain. (These options will be summarized below).</p><p>You may also directly call this ‘throttledSaveDrain’ loki method which can wait for the queue to drain. You might do this using any of these variations/options :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// wait indefinitely (recursively)</span><br><span class="line">db.throttledSaveDrain(function () &#123;</span><br><span class="line">  console.log(&quot;no saves in progress&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// wait only for the -current- queue to deplete</span><br><span class="line">db.throttledSaveDrain(function () &#123;</span><br><span class="line">  console.log(&quot;queue drained&quot;);</span><br><span class="line">&#125;, &#123; recursiveWait: false &#125; );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// wait recursively but only for so long...</span><br><span class="line">db.throttledSaveDrain(function (success) &#123;</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    console.log(&quot;no saves in progress&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    console.log(&quot;taking too long, try again later&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123; recursiveWaitLimit: true, recursiveWaitLimitDuration: 2000 &#125;);</span><br></pre></td></tr></table></figure><p>If you do not wish loki to supervise these conflicts with its throttling contention management, you can disable this by constructing loki with the following option (in addition to any existing options you are passing) :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var db = new loki(&apos;test.db&apos;, &#123; throttledSaves: false &#125;);</span><br></pre></td></tr></table></figure><h1 id="Creating-your-own-Loki-Persistence-Adapters"><a href="#Creating-your-own-Loki-Persistence-Adapters" class="headerlink" title="Creating your own Loki Persistence Adapters"></a>Creating your own Loki Persistence Adapters</h1><p>Lokijs currently supports two types of database adapters : ‘basic’, and ‘reference’ mode adapters. Basic adapters are passed a string to save and return a string when loaded… this is well suited to key/value stores. Reference mode adapters are passed a reference to the database itself where it can save however it wishes to. When loading, reference mode adapters can return an object reference or serialized string. Below we will describe the minimal functionality which lokijs requires, you may want to provide additional adapter functionality for deleting or inspecting its persistence store.</p><h1 id="Creating-your-own-‘Basic’-persistence-adapter"><a href="#Creating-your-own-‘Basic’-persistence-adapter" class="headerlink" title="Creating your own ‘Basic’ persistence adapter"></a>Creating your own ‘Basic’ persistence adapter</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MyCustomAdapter.prototype.loadDatabase = function(dbname, callback) &#123;</span><br><span class="line">  // using dbname, load the database from wherever your adapter expects it</span><br><span class="line">  var serializedDb = localStorage[dbname];</span><br><span class="line"></span><br><span class="line">  var success = true; // make your own determinations</span><br><span class="line"></span><br><span class="line">  if (success) &#123;</span><br><span class="line">    callback(serializedDb);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    callback(new Error(&quot;There was a problem loading the database&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and a saveDatabase example might look like :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MyCustomAdapter.prototype.saveDatabase = function(dbname, dbstring, callback) &#123;</span><br><span class="line">  // store the database, for this example to localstorage</span><br><span class="line">  localStorage[dbname] = dbstring;</span><br><span class="line"></span><br><span class="line">  var success = true;  // make your own determinations</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    callback(null);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    callback(new Error(&quot;An error was encountered loading &quot; + dbname + &quot; database.&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Creating-your-own-‘Reference-Mode’-persistence-adapter"><a href="#Creating-your-own-‘Reference-Mode’-persistence-adapter" class="headerlink" title="Creating your own ‘Reference Mode’ persistence adapter"></a>Creating your own ‘Reference Mode’ persistence adapter</h1><p>An additional ‘level’ of adapter support would be for your adapter to support <strong>‘reference’</strong> mode support. This ‘reference’ mode will allow lokijs to provide your adapter with a reference to a lightweight ‘copy’ of the database sharing only the collection.data[] document object instances with the original database. You would use this reference to destructure or save however you want to.</p><p>To instruct loki that your adapter supports ‘reference’ mode, you will need to implement a top level property called ‘mode’ on your adapter and set it equal to ‘reference’. Having done that and configured that adapter to be used, whenever loki wishes to save the database it will instead call out to an exportDatabase() method on your adapter.</p><p>A simple example of an advanced ‘reference’ mode adapter might look like :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function YourAdapter() &#123;</span><br><span class="line">   this.mode = &quot;reference&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">YourAdapter.prototype.exportDatabase = function(dbname, dbref, callback) &#123;</span><br><span class="line">  this.customSaveLogic(dbref);</span><br><span class="line"></span><br><span class="line">  var success = true; // make your own determinations</span><br><span class="line"></span><br><span class="line">  if (success) &#123;</span><br><span class="line">    callback(null);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    callback(new Error(&quot;some error occurred.&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// reference mode uses the same loadDatabase method signature</span><br><span class="line">YourAdapter.prototype.loadDatabase = function(dbname, callback) &#123;</span><br><span class="line">  // do some magic to reconstruct a new loki database object instance from wherever</span><br><span class="line">  var newDatabase = this.customLoadLogic();</span><br><span class="line"> </span><br><span class="line">  var success = true; // make you own determinations</span><br><span class="line"></span><br><span class="line">  // once reconstructed, loki will expect either a serialized response or a Loki object instance to reinflate from</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    callback(newSerialized);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    callback(new Error(&quot;some error&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LokiPartitioningAdapter"><a href="#LokiPartitioningAdapter" class="headerlink" title="LokiPartitioningAdapter"></a>LokiPartitioningAdapter</h1><p>This is an adapter for adapters. It wraps around and converts any ‘basic’ persistence adapter into one that scales nicely to your memory contraints. It can split your database up, saving each collection independently and only if changes have occurred since the last save. Since each collection is saved separately there is lower memory overhead and since only dirty collections are saved there is improved i/o save speeds.</p><blockquote><p>Chrome (using indexedDb) places a restriction on how large a single saved ‘chunk’ can be, this Partitioning adapter with just partitioning raises that limit from being ‘per db’ to ‘per collection’… when paging is enabled that limit is raised to being ‘per document’. Chrome indexedDb limit is somewhere around 30-60megs sized chunks.</p></blockquote><p>An example using partition adapter with our LokiIndexedAdapter might appear such as :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;appAdapter&apos;);</span><br><span class="line">var pa = new loki.LokiPartitioningAdapter(idbAdapter);</span><br><span class="line"></span><br><span class="line">var db = new loki(&apos;sandbox.db&apos;, &#123; adapter: pa &#125;);</span><br></pre></td></tr></table></figure><p>If you expect a single collection to grow rather large you may even want to utilize an additional ‘paging’ mode that this adapter provides. This is useful if you want to limit the size of data sent to the inner persistence adapter. This paging mode was added to accomodate a Chrome limitation on maximum record sizes. An example using paging mode might appear as follows :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;appAdapter&apos;);</span><br><span class="line">var pa = new loki.LokiPartitioningAdapter(idbAdapter, &#123; paging: true &#125;);</span><br><span class="line"></span><br><span class="line">var db = new loki(&apos;sandbox.db&apos;, &#123; adapter: pa &#125;);</span><br></pre></td></tr></table></figure><p>You can also pass in a pageSize option if you wish to use a page size other than the default 25meg page size.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// set up adapter to page using 35 meg page size</span><br><span class="line">var pa = new loki.LokiPartitioningAdapter(idbAdapter, &#123; paging: true, pageSize:35*1024*1024 &#125;);</span><br></pre></td></tr></table></figure><h1 id="LokiMemoryAdapter"><a href="#LokiMemoryAdapter" class="headerlink" title="LokiMemoryAdapter"></a>LokiMemoryAdapter</h1><p>This ‘basic’ persistence adapter is only intended for experimenting and testing since it retains its key/value store in memory and will be lost when session is done. This enables us to verify the partitioning adapter works and can be used to mock persistence for unit testing.</p><p>You might access this memory adapter (which is included in the main source file) similarly to the following :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var mem = new loki.LokiMemoryAdapter();</span><br><span class="line">var db = new loki(&apos;sandbox.db&apos;, &#123;adapter: mem&#125;);</span><br></pre></td></tr></table></figure><p>If you wish to simulate asynchronous ‘basic’ adapter you can pass options to its constructor :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// simulate 50ms async delay for loads and saves. this will yield thread until then</span><br><span class="line">var mem = new loki.LokiMemoryAdapter(&#123; asyncResponses: true, asyncTimeout: 50 &#125;);</span><br><span class="line">var db = new loki(&apos;sandbox.db&apos;, &#123;adapter: mem&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>In order to see LokiPartitioningAdapter used in conjunction with LokiMemoryAdapter you can view this <a href="https://rawgit.com/techfort/LokiJS/master/examples/sandbox/LokiSandbox.htm#rawgist=https://gist.githubusercontent.com/obeliskos/15c1aa87da16cd89b328eb84bbcdf8fa/raw/d91ac3fee212dc5aa96cb05f479d825faa17c1c8/PartitionedMemoryAdapterTest" target="_blank" rel="noopener">Loki Sandbox gist</a> in your browser.</p></blockquote><p>What is happening in the gist linked above is that we create an instance of a LokiMemoryAdapter and pass that instance to the LokiPartitioningAdapter. We utilimately pass in the created LokiPartitioningAdapter instance to the database constructor. We then add multiple collections to our database, save it, update one of the collections (causing that collection’s ‘dirty’ flag to be set), and save again. When we examine the output of the script we can view the contents of the memory adapter’s internal hash store to see how there are multiple keys for a single database. We can also see that our modified collection (along with the database container itself) was saved again. The database container currently has no ‘dirty’ flag set but since we remove all collection.data[] object instances from it, it is relatively lightweight.</p><h1 id="‘Rolling-your-own’-structured-serialization-mechanism"><a href="#‘Rolling-your-own’-structured-serialization-mechanism" class="headerlink" title="‘Rolling your own’ structured serialization mechanism"></a>‘Rolling your own’ structured serialization mechanism</h1><p>In addition to the <a href="https://github.com/techfort/LokiJS/wiki/Changes-API" target="_blank" rel="noopener">ChangesAPI</a> which can be utilized to isolate changesets, LokiJS has established several internal utility methods to assist users in developing optimal persistence or transmission of database contents.</p><p>Those mechanisms include the ability to decompose the database into ‘partitions’ of structured serializations or assembled into a line oriented format (non-partitioned) and either delimited (single delimited string per collection) or non-delimited (array of strings, one per document). These utility methods are located on the Loki object instance itself as the ‘serializeDestructured’ and ‘deserializeDestructured’ methods. They can be invoked to create structured json serialization for the entire database, or (if you pass a partition option) it can provide a single partition at a time. Internal loki structured serialization in its current form provides mild memory overhead reduction and decreases I/O time if only some collections need to be saved. It may also be useful for other data exchange or synchronization mechanisms.</p><p>In lokijs terminology the partitions of a database include the database container (partition -1) along with each individual collection (partitions 0-n).</p><p>To destructure in various formats you can experiment with the following parameters :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = db.serializeDestructured(&#123;</span><br><span class="line">  partitioned: false,</span><br><span class="line">  delimited: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To destructure a single partition you might use the following syntax and experiment with ‘delimited’ and ‘partition’ properties :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var result = db.serializeDestructured(&#123;</span><br><span class="line">  partitioned: true,</span><br><span class="line">  partition: 1,</span><br><span class="line">  delimited: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>To experiment with the various structured serialization formats you can view this <a href="https://rawgit.com/techfort/LokiJS/master/examples/sandbox/LokiSandbox.htm#rawgist=https://gist.githubusercontent.com/obeliskos/98a73205d7fe9746a687634e19a5eb89/raw/3821c9bbb6bae2689b00d16be9fae78dff430e28/destructuring%2520demo" target="_blank" rel="noopener">Loki Sandbox gist</a> and try various combinations of ‘partitioned’ and ‘delimited’ options (making sure both the serializeDestructured and deserializeDestructured use the same values.</p></blockquote><p>Destructuring (making many smaller json serializations vs one large serialization) does not lower memory overhead but seems to be a little faster. Partitioning can reduce memory overhead if you can dispose of those memory chunks before advancing to the next (which our adapter implementations do). Our 2.0.0 branch which is able to use ES6 language constructs may gain an iterable interface in the future for data exchange or line-by-line streaming.</p><p>If your database is small enough you can use the LokiPartitioningAdapter (with or without paging) along with LokiMemoryAdapter to decompose database into appropriately sized ‘chunks’ for transmission.</p><h1 id="Detailed-LokiIndexedAdapter-Description"><a href="#Detailed-LokiIndexedAdapter-Description" class="headerlink" title="Detailed LokiIndexedAdapter Description"></a>Detailed LokiIndexedAdapter Description</h1><p>Our LokiIndexedAdapter is implemented as a ‘basic’ mode loki persistence adapter. Since this will probably be the default web persistence adapter, this section will overview some of its advanced features.</p><p>It implements persistence by defining an app/key/value database in indexeddb for storing serialized databases (or partitions). The ‘app’ portion is designated when instantiating the adapter and loki only supplies it key/value pair for storage.</p><h3 id="Simple-Example-of-using-LokiIndexedAdapter-for-browser-environments"><a href="#Simple-Example-of-using-LokiIndexedAdapter-for-browser-environments" class="headerlink" title="Simple Example of using LokiIndexedAdapter (for browser environments) :"></a>Simple Example of using LokiIndexedAdapter (for browser environments) :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;scripts/lokijs/lokijs.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;scripts/lokijs/loki-indexed-adapter.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">var db = new loki(&apos;test&apos;, &#123; adapter: idbAdapter &#125;);</span><br></pre></td></tr></table></figure><p>Note the ‘finance’ in this case represents an ‘App’ context and the ‘test’ designates the key (or database name)… the ‘value’ is the serialized strings representing your database which loki will provide. Advantages include larger storage limits over localstorage, and a catalog based approach where you can store many databases, grouped by an ‘App’ context. Since indexedDB storage is provided ‘per-domain’, and on any given domain you might be running several web ‘apps’ each with its own database(s), this structure allows for organization and expandibility.</p><blockquote><p><strong>*Note : the ‘App’ context is an conceptual separation, not a security partition. Security is provided by your web browser, partitioned per-domain within client storage in the browser/system.*</strong></p></blockquote><h1 id="Loki-Indexed-adapter-interface"><a href="#Loki-Indexed-adapter-interface" class="headerlink" title="Loki Indexed adapter interface"></a>Loki Indexed adapter interface</h1><p>In addition to core loadDatabase and saveDatabase methods, the loki Indexed adapter provides the ability to getDatabaseList (for the current app context), deleteDatabase, and getCatalogSummary to retrieve unfiltered list of app/keys along with the size in database. (Note sizes reported may not be Unicode sizes so effective ‘size’ it may consume might be double that amount as indexeddb saves in Unicode). The loki indexed adapter also is console-friendly… even though indexeddb is highly asynchronous, relying on callbacks, you can omit callbacks for many of its methods and will log results to console instead. This makes experimenting, diagnosing, and maintenance of loki catalog easier to learn and inspect.</p><h3 id="Full-Examples-of-using-loki-indexed-adapter"><a href="#Full-Examples-of-using-loki-indexed-adapter" class="headerlink" title="Full Examples of using loki indexed adapter"></a>Full Examples of using loki indexed adapter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// Save : will save App/Key/Val as &apos;finance&apos;/&apos;test&apos;/&#123;serializedDb&#125;</span><br><span class="line">// if appContect (&apos;finance&apos; in this example) is omitted, &apos;loki&apos; will be used</span><br><span class="line">var idbAdapter = new lokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">var db = new loki(&apos;test&apos;, &#123; adapter: idbAdapter &#125;);</span><br><span class="line">var coll = db.addCollection(&apos;testColl&apos;);</span><br><span class="line">coll.insert(&#123;test: &apos;val&apos;&#125;);</span><br><span class="line">db.saveDatabase();  // could pass callback if needed for async complete</span><br><span class="line"></span><br><span class="line">// Load database</span><br><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">var db = new loki(&apos;test&apos;, &#123; adapter: idbAdapter &#125;);</span><br><span class="line">db.loadDatabase(&#123;&#125;, function(result) &#123;</span><br><span class="line">  console.log(&apos;done&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Get database list</span><br><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">idbAdapter.getDatabaseList(function(result) &#123;</span><br><span class="line">  // result is array of string names for that appcontext (&apos;finance&apos;)</span><br><span class="line">  result.forEach(function(str) &#123;</span><br><span class="line">    console.log(str);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Delete database</span><br><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">idbAdapter.deleteDatabase(&apos;test&apos;); // delete &apos;finance&apos;/&apos;test&apos; value from catalog</span><br><span class="line"></span><br><span class="line">// Delete database partitions and/or pages</span><br><span class="line">// This deletes all partitions or pages derived from this base filename</span><br><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">idbAdapter.deleteDatabasePartitions(&apos;test&apos;); </span><br><span class="line"></span><br><span class="line">// Summary</span><br><span class="line">var idbAdapter = new LokiIndexedAdapter(&apos;finance&apos;);</span><br><span class="line">idbAdapter.getCatalogSummary(function(entries) &#123;</span><br><span class="line">  entries.forEach(function(obj) &#123;</span><br><span class="line">    console.log(&quot;app : &quot; + obj.app);</span><br><span class="line">    console.log(&quot;key : &quot; + obj.key);</span><br><span class="line">    console.log(&quot;size : &quot; + obj.size);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Examples-of-using-loki-Indexed-adapter-from-console"><a href="#Examples-of-using-loki-Indexed-adapter-from-console" class="headerlink" title="Examples of using loki Indexed adapter from console"></a>Examples of using loki Indexed adapter from console</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CONSOLE USAGE : if using from console for management/diagnostic, here are a few examples :</span></span><br><span class="line"><span class="keyword">var</span> adapter = <span class="keyword">new</span> LokiIndexedAdapter(<span class="string">'loki'</span>);  <span class="comment">// or whatever appContext you want to use</span></span><br><span class="line">adapter.getDatabaseList(); <span class="comment">// with no callback passed, this method will log results to console</span></span><br><span class="line">adapter.saveDatabase(<span class="string">'UserDatabase'</span>, <span class="built_in">JSON</span>.stringify(myDb));</span><br><span class="line">adapter.loadDatabase(<span class="string">'UserDatabase'</span>); <span class="comment">// will log the serialized db to console</span></span><br><span class="line">adapter.deleteDatabase(<span class="string">'UserDatabase'</span>);</span><br><span class="line">adapter.getCatalogSummary(); <span class="comment">// gets list of all keys along with their sizes</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;LokiJS持久化是通过适配器接口实现的。我们支持&lt;code&gt;自动保存&lt;/code&gt;和&lt;code&gt;自动加载&lt;/code&gt;选项，简单的&lt;cod
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>查询示例</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs3_query_examples/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs3_query_examples/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注意：我们现在在这个库的’examples’子文件夹中有几个快速入门示例。"><a href="#注意：我们现在在这个库的’examples’子文件夹中有几个快速入门示例。" class="headerlink" title="注意：我们现在在这个库的’examples’子文件夹中有几个快速入门示例。"></a>注意：我们现在在这个库的’examples’子文件夹中有几个快速入门示例。</h3><blockquote><p><a href="https://github.com/techfort/LokiJS/blob/master/examples/quickstart-core.js" target="_blank" rel="noopener">https://github.com/techfort/LokiJS/blob/master/examples/quickstart-core.js</a></p><p> <a href="https://github.com/techfort/LokiJS/blob/master/examples/quickstart-chaining.js" target="_blank" rel="noopener">https://github.com/techfort/LokiJS/blob/master/examples/quickstart-chaining.js</a></p><p><a href="https://github.com/techfort/LokiJS/blob/master/examples/quickstart-transforms.js" target="_blank" rel="noopener">https://github.com/techfort/LokiJS/blob/master/examples/quickstart-transforms.js</a></p><p><a href="https://github.com/techfort/LokiJS/blob/master/examples/quickstart-dynview.js" target="_blank" rel="noopener">https://github.com/techfort/LokiJS/blob/master/examples/quickstart-dynview.js</a></p><p>对于持久性示例，我们在 <a href="https://rawgit.com/techfort/LokiJS/master/examples/sandbox/LokiSandbox.htm" target="_blank" rel="noopener">Loki Sandbox </a>中的 <a href="https://github.com/techfort/LokiJS/tree/master/examples" target="_blank" rel="noopener">示例文件夹</a> 和Web快速入门要点中编号了节点快速入门。</p></blockquote><h3 id="设计查询"><a href="#设计查询" class="headerlink" title="设计查询"></a>设计查询</h3><p>LokiJS衍生出了多种查询数据库的机制。在最高抽象层次上，让我们将这些方法分为以下几类：</p><ul><li>核心方法 - 直接应用于集合的查询的简单而强大的方法。</li><li>链（通过Resultset） - 允许按顺序排序(sorting)，限制(limiting)，偏移(offsets)和多个查询(multiple queries)。</li><li>链变换 - 类似于上面的方法链，但在可以序列化的对象结构中定义。</li><li>动态视图  - 允许具有可能较大结果集的常用查询以获得最佳性能和可用性。</li></ul><p>在每种方法中，您的查询通常属于<code>find</code>和<code>where</code>类别。</p><h3 id="‘Where’-查询"><a href="#‘Where’-查询" class="headerlink" title="‘Where’ 查询"></a>‘Where’ 查询</h3><p>这些查询利用<code>JavaScript函数</code>来过滤数据。<strong>这是用于过滤集合中文档的最慢但最通用的方法。</strong>从本质上讲，我们将在集合中的每个文档上应用过滤器，以查看它是否应该放在结果集中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的匿名过滤器</span></span><br><span class="line"><span class="keyword">var</span> results = coll.where(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj.legs === <span class="number">8</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -或- 设置命名过滤器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleipnirFilter</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj.legs === <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后传递给where函数</span></span><br><span class="line">results = coll.where(sleipnirFunction);</span><br></pre></td></tr></table></figure><h3 id="‘Find’-查询"><a href="#‘Find’-查询" class="headerlink" title="‘Find’ 查询"></a>‘Find’ 查询</h3><p><strong><code>Find查询</code>基于<code>mongo查询</code>语法的子集，并且能够使用<code>索引</code>来加速查询。</strong><u>与<code>集合变换(Collection Transforms)</code>或<code>动态视图(Dynamic Views)</code>一起使用时，这些过滤器可以保存到数据库本身中。</u><strong>这是查询Loki数据库的首选方法。</strong><u>使用<code>Find</code>查询所有内容（或尽可能多地过滤），如果发现不支持的边界情况，则使用<code>&#39;where&#39;</code>过滤。</u></p><h3 id="‘Find’-操作符示例"><a href="#‘Find’-操作符示例" class="headerlink" title="‘Find’ 操作符示例 :"></a>‘Find’ 操作符示例 :</h3><p><strong>[目前增加和审查几个操作符的功能…我们可能应该用更好的例子来扩展本节的更多细节]</strong></p><p>目前支持的主要操作符：</p><p><strong>$eq-(equal)</strong> - 过滤具有(严格)<code>相等</code>属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式（假设已经使用了$eq运算符）</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'Name'</span>: <span class="string">'Odin'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式 $eq</span></span><br><span class="line">results = coll.find(&#123;<span class="string">'Name'</span>: &#123; <span class="string">'$eq'</span> : <span class="string">'Odin'</span> &#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$ne-(not equal</strong>) -对属性<code>不等于</code>提供值的文档进行过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不等于测试</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'legs'</span>: &#123; <span class="string">'$ne'</span> : <span class="number">8</span> &#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$aeq-(abstract equal)</strong> - 过滤具有抽象（非严格）<code>等同</code>性质的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将匹配20岁或20岁的文档</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(age: &#123;<span class="attr">$aeq</span>: <span class="number">20</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>$dteq-(date equal)</strong> - 过滤<code>日期属性等于</code>提供日期值的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dt1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1/1/2017"</span>);</span><br><span class="line"><span class="keyword">var</span> dt2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1/1/2017"</span>);</span><br><span class="line"></span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'mjolnir'</span>, <span class="attr">created</span>: dt1 &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'gungnir'</span>, <span class="attr">created</span>: dt2 &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回上述两个插入的文档</span></span><br><span class="line"><span class="keyword">var</span> results = items.find(&#123; <span class="attr">created</span>: &#123; <span class="attr">$dteq</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1/1/2017"</span>) &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$gt-(greater than)</strong> - 过滤属性<code>大于</code>提供值的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">40</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$gte-(greater than equal)</strong> -过滤具有<code>大于或等于</code>提供值的属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">40</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$lt-(less than)</strong> - 过滤属性<code>小于</code>提供值的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$lt'</span>: <span class="number">40</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$lte-(less than equal)</strong> - 过滤属性<code>小于或等于</code>提供值的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$lte'</span>: <span class="number">40</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$between</strong> - 通过提供的属性过滤出在提供的值<code>之间</code>的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配50至75之间的计数值的用户</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="attr">count</span> : &#123; <span class="string">'$between'</span>: [<span class="number">50</span>, <span class="number">75</span>] &#125;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意：上面的<code>$gt，$gte，$lt，$lte</code>和<code>$ops</code>之间使用<code>&#39;loki&#39;</code>排序，它提供了一个统一范围的<code>actoss</code>混合类型，并返回相同的结果，无论属性是否被索引。这对二进制索引和保证索引和非索引比较结果相等是必需的。</p><p>如果您不希望利用二进制索引，并且您希望简单的JavaScript比较可以接受，那么我们提供以下操作（由于它们的简化比较）可以提供更优化的执行速度。</p><p><strong>$jgt-(javascipt greater than)</strong> - 过滤(使用简化的JavaScript比较)出具有<code>大于</code>给定值的属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$jgt'</span>: <span class="number">40</span>&#125;&#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>$jgte-(javascipt greater than equal)</strong> - 过滤(使用简化的JavaScript比较)出具有<code>大于等于</code>给定值的属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$jgte'</span>: <span class="number">40</span>&#125;&#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>$jlt-(javascipt less than)</strong> - 过滤(使用简化的JavaScript比较)出具有<code>小于</code>给定值的属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$jlt'</span>: <span class="number">40</span>&#125;&#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>$jlte-(javascipt less than equal)</strong> - 过滤(使用简化的JavaScript比较)出具有<code>小于等于</code>给定值的属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> results = coll.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$jlte'</span>: <span class="number">40</span>&#125;&#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>$jbetween</strong>- 通过提供的属性过滤(使用简化的JavaScript比较)出在提供的值<code>之间</code>的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> results = users.find(&#123; <span class="attr">count</span> : &#123; <span class="string">'$jbetween'</span>: [<span class="number">50</span>, <span class="number">75</span>] &#125;&#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>$regex</strong> - 根据提供的正则表达式过滤出具有属性匹配的文档</p><blockquote><p>如果在<code>命名转换</code>或<code>动态视图</code>过滤器中使用正则表达式操作符，最好使用<code>后两个示例</code>，因为原始正则表达式好像没有<code>序列化/反序列化</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入原始正则表达式</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'Name'</span>: &#123; <span class="string">'$regex'</span> : <span class="regexp">/din/</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或仅传递字符串模式</span></span><br><span class="line">results = coll.find(&#123;<span class="string">'Name'</span>: &#123; <span class="string">'$regex'</span>: <span class="string">'din'</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或传入[pattern，options]字符串数组</span></span><br><span class="line">results = coll.find(&#123;<span class="string">'Name'</span>: &#123; <span class="string">'$regex'</span>: [<span class="string">'din'</span>, <span class="string">'i'</span>] &#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$in</strong> - 过滤具有与所提供的数组值<code>相匹配</code>的属性的文档。你的属性不应该是一个数组，但你的比较值应该是。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'odin'</span> &#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'thor'</span> &#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'svafrlami'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组集合['odin'，'thor']中将用户与名称进行匹配</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="string">'name'</span> : &#123; <span class="string">'$in'</span> : [<span class="string">'odin'</span>, <span class="string">'thor'</span>] &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$nin</strong> -  过滤具有与所提供的数组值<code>不匹配</code>的属性的文档。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'odin'</span> &#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'thor'</span> &#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'svafrlami'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将用户与名称不匹配的用户匹配['odin'，'thor']（仅svafrlami文档符合）</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="string">'name'</span> : &#123; <span class="string">'$nin'</span> : [<span class="string">'odin'</span>, <span class="string">'thor'</span>] &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$keyin</strong> - filter for document(s) whose property value is defined in the provided hash object keys.<em>(Equivalent to $in: Object.keys(hashObject))</em> ( <a href="https://github.com/techfort/LokiJS/issues/362" target="_blank" rel="noopener">#362</a>, <a href="https://github.com/techfort/LokiJS/issues/365" target="_blank" rel="noopener">#365</a> )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories.insert(&#123; <span class="attr">name</span>: <span class="string">'Title'</span>, <span class="attr">column</span>: <span class="string">'title'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// since the op doesn't use the title value, this is most effective with existing objects</span></span><br><span class="line"><span class="keyword">var</span> result = categories.find(&#123;<span class="attr">column</span>: &#123; <span class="attr">$keyin</span>: &#123; <span class="attr">title</span>: <span class="string">'anything'</span>&#125; &#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$nkeyin</strong> - filter for document(s) whose property value is not defined in the provided hash object keys. <strong>(Equivalent to $nin: Object.keys(hashObject))</strong> ( <a href="https://github.com/techfort/LokiJS/issues/362" target="_blank" rel="noopener">#362</a>, <a href="https://github.com/techfort/LokiJS/issues/365" target="_blank" rel="noopener">#365</a> )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = categories.find(&#123;<span class="attr">column</span>: &#123; <span class="attr">$nkeyin</span>: &#123; <span class="attr">title</span>: <span class="string">'anything'</span>&#125; &#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$definedin</strong> - filter for document(s) whose property value is defined in the provided hash object as a value other than <strong>undefined</strong>. <a href="https://github.com/techfort/LokiJS/issues/285" target="_blank" rel="noopener">#285</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'mjolnir'</span>, <span class="attr">owner</span>: <span class="string">'thor'</span>, <span class="attr">maker</span>: <span class="string">'dwarves'</span> &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'gungnir'</span>, <span class="attr">owner</span>: <span class="string">'odin'</span>, <span class="attr">maker</span>: <span class="string">'elves'</span> &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'tyrfing'</span>, <span class="attr">owner</span>: <span class="string">'Svafrlami'</span>, <span class="attr">maker</span>: <span class="string">'dwarves'</span> &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'draupnir'</span>, <span class="attr">owner</span>: <span class="string">'odin'</span>, <span class="attr">maker</span>: <span class="string">'elves'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns gungnir and draupnir.  similar to $keyin, the value ('rule') is not used by the op</span></span><br><span class="line"><span class="keyword">var</span> results = items.find(&#123;<span class="attr">maker</span>: &#123; <span class="attr">$efinedin</span>: &#123; <span class="attr">elves</span>: <span class="string">'rule'</span> &#125; &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$undefinedin</strong> - filter for document(s) whose property value is not defined in the provided hash object or defined but is <strong>undefined</strong>. <a href="https://github.com/techfort/LokiJS/issues/285" target="_blank" rel="noopener">#285</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'mjolnir'</span>, <span class="attr">owner</span>: <span class="string">'thor'</span>, <span class="attr">maker</span>: <span class="string">'dwarves'</span> &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'gungnir'</span>, <span class="attr">owner</span>: <span class="string">'odin'</span>, <span class="attr">maker</span>: <span class="string">'elves'</span> &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'tyrfing'</span>, <span class="attr">owner</span>: <span class="string">'Svafrlami'</span>, <span class="attr">maker</span>: <span class="string">'dwarves'</span> &#125;);</span><br><span class="line">items.insert(&#123; <span class="attr">name</span> : <span class="string">'draupnir'</span>, <span class="attr">owner</span>: <span class="string">'odin'</span>, <span class="attr">maker</span>: <span class="string">'elves'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns mjolnir and tyrfing where the 'dwarves' val is not a property on our passed object</span></span><br><span class="line"><span class="keyword">var</span> results = items.find(&#123;<span class="attr">maker</span>: &#123; <span class="attr">$undefinedin</span>: &#123; <span class="attr">elves</span>: <span class="string">'rule'</span> &#125; &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$contains</strong> - 过滤包含提供值的属性的文档. ( <a href="https://github.com/techfort/LokiJS/pull/120/commits/1f08433203554ccf00b381cbea4e72e25e62d5da" target="_blank" rel="noopener">commit</a>, <a href="https://github.com/techfort/LokiJS/issues/205" target="_blank" rel="noopener">#205</a> ). 当你的属性包含一个数组，但你的比较值不是一个数组时，请使用它。.</p><blockquote><p>当<code>typeof</code>属性是：</p><ul><li>string: 它会为你的字符串做一个子字符串匹配(indexOf)</li><li>array: 它会检查该数组中是否存在“value”(indexOf)</li><li>object: 它会检查你的’值’是否是该对象的一个定义的属性</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'odin'</span>, <span class="attr">weapons</span> : [<span class="string">'gungnir'</span>, <span class="string">'draupnir'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'thor'</span>, <span class="attr">weapons</span> : [<span class="string">'mjolnir'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'svafrlami'</span>, <span class="attr">weapons</span> : [<span class="string">'tyrfing'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'arngrim'</span>, <span class="attr">weapons</span> : [<span class="string">'tyrfing'</span>]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns 'svafrlami' and 'arngrim' documents</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="string">'weapons'</span> : &#123; <span class="string">'$contains'</span> : <span class="string">'tyrfing'</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$containsAny</strong> - 过滤包含任何提供值的属性的文档。当你的属性包含一个数组时，使用这个 - 并且你的比较值是一个数组。</p><blockquote><p>When typeof property is :</p><ul><li>string: 它会为你的字符串做一个子字符串匹配(indexOf)</li><li>array: 它会检查该数组中是否存在“value”(indexOf)</li><li>object: 它会检查你的’值’是否是该对象的一个​定义的属性</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'odin'</span>, <span class="attr">weapons</span> : [<span class="string">'gungnir'</span>, <span class="string">'draupnir'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'thor'</span>, <span class="attr">weapons</span> : [<span class="string">'mjolnir'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'svafrlami'</span>, <span class="attr">weapons</span> : [<span class="string">'tyrfing'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'arngrim'</span>, <span class="attr">weapons</span> : [<span class="string">'tyrfing'</span>]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns 'svafrlami', 'arngrim', and 'thor' documents</span></span><br><span class="line">results = users.find(&#123; <span class="string">'weapons'</span> : &#123; <span class="string">'$containsAny'</span> : [<span class="string">'tyrfing'</span>, <span class="string">'mjolnir'</span>] &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$containsNone</strong> - 过滤具有不包含所提供的值的属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'odin'</span>, <span class="attr">weapons</span> : [<span class="string">'gungnir'</span>, <span class="string">'draupnir'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'thor'</span>, <span class="attr">weapons</span> : [<span class="string">'mjolnir'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'svafrlami'</span>, <span class="attr">weapons</span> : [<span class="string">'tyrfing'</span>]&#125;);</span><br><span class="line">users.insert(&#123; <span class="attr">name</span> : <span class="string">'arngrim'</span>, <span class="attr">weapons</span> : [<span class="string">'tyrfing'</span>]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns 'svafrlami' and 'arngrim'</span></span><br><span class="line">results = users.find(&#123; <span class="string">'weapons'</span> : &#123; <span class="string">'$containsNone'</span> : [<span class="string">'gungnir'</span>, <span class="string">'mjolnir'</span>] &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$type</strong> - 过滤具有指定类型属性的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">users.insert([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'odin'</span>, <span class="attr">weapons</span>: [<span class="string">'gungnir'</span>, <span class="string">'draupnir'</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'thor'</span>, <span class="attr">weapons</span>: <span class="string">'mjolnir'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'svafrlami'</span>, <span class="attr">weapons</span>: [<span class="string">'tyrfing'</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'arngrim'</span>, <span class="attr">weapons</span>: [<span class="string">'tyrfing'</span>] &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回docs（非数组）字符串值为'weapons'（mjolnir）</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="string">'weapons'</span> : &#123; <span class="string">'$type'</span> : <span class="string">'string'</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$finite</strong> - 过滤具有数字或非数字属性的文档。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回所有文档，其中isFinite（doc.age）=== true</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="attr">age</span>: &#123; <span class="attr">$finite</span>: <span class="literal">true</span> &#125;&#125;);</span><br></pre></td></tr></table></figure><p><strong>$size</strong> - 筛选具有指定大小的数组属性的文档。（不适用于字符串）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">users.insert([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'odin'</span>, <span class="attr">weapons</span>: [<span class="string">'gungnir'</span>, <span class="string">'draupnir'</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'thor'</span>, <span class="attr">weapons</span>: <span class="string">'mjolnir'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'svafrlami'</span>, <span class="attr">weapons</span>: [<span class="string">'tyrfing'</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'arngrim'</span>, <span class="attr">weapons</span>: [<span class="string">'tyrfing'</span>] &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回docs'weapons'是2个元素数组（odin）</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="string">'weapons'</span> : &#123; <span class="string">'$size'</span> : <span class="number">2</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$len</strong> - 筛选具有指定长度的字符串属性的文档。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">users.insert([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'odin'</span>, <span class="attr">weapons</span>: [<span class="string">'gungnir'</span>, <span class="string">'draupnir'</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'thor'</span>, <span class="attr">weapons</span>: <span class="string">'mjolnir'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'svafrlami'</span>, <span class="attr">weapons</span>: [<span class="string">'tyrfing'</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'arngrim'</span>, <span class="attr">weapons</span>: [<span class="string">'tyrfing'</span>] &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns docs where 'name' is a 9 character string (svafrllami)</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="string">'name'</span> : &#123; <span class="string">'$len'</span> : <span class="number">9</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><p><strong>$and</strong> - 筛选符合所有嵌套子表达式的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取匹配两个子表达式的文档</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(&#123;</span><br><span class="line">  <span class="string">'$and'</span>: [&#123; </span><br><span class="line">      <span class="string">'age'</span> : &#123;</span><br><span class="line">        <span class="string">'$gt'</span>: <span class="number">30</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">'name'</span> : <span class="string">'Thor'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternative 'implicit' syntax :</span></span><br><span class="line">results = coll.find(&#123;</span><br><span class="line">  age: &#123; <span class="attr">$gt</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  name: <span class="string">'Thor'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>$or</strong> - 筛选符合任何嵌套子表达式的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取匹配任何子表达式的文档</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(&#123;</span><br><span class="line">  <span class="string">'$or'</span>: [&#123; </span><br><span class="line">      <span class="string">'age'</span> : &#123;</span><br><span class="line">        <span class="string">'$gte'</span>: <span class="string">'40'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">'name'</span> : <span class="string">'Thor'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="支持“find”查询的功能"><a href="#支持“find”查询的功能" class="headerlink" title="支持“find”查询的功能"></a>支持“find”查询的功能</h3><p>这些<code>操作符</code>可用于组合查找过滤对象，可用于以下内容中：</p><ul><li>Collection find()</li><li>Collection findOne()</li><li>(chained) Resultset find()</li><li>Collection Transforms</li><li>DynamicView applyFind()</li></ul><h3 id="程序化查询示例"><a href="#程序化查询示例" class="headerlink" title="程序化查询示例"></a>程序化查询示例</h3><p>以下查询返回相同的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Core collection 'find' method</span></span><br><span class="line"><span class="keyword">var</span> results = coll.find(&#123;<span class="string">'Age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">40</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resultset chaining</span></span><br><span class="line">results = coll.chain().find(&#123;<span class="string">'Age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">40</span>&#125;&#125;).data();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Core collection 'where' method</span></span><br><span class="line">results = coll.where(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj.Age &gt;= <span class="number">40</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Resultset-链"><a href="#Resultset-链" class="headerlink" title="Resultset 链"></a>Resultset 链</h3><p>核心<code>find</code>和<code>where</code>功能是<code>Resultset链</code>允许您构建的两个主要构建块。其他可用的方法包括：</p><ul><li>limit - 允许将结果集限制为指定数量的文档。</li><li>offset - 允许从结果集中跳过第一批数据文档。</li><li>branch - 用于将查询路径分成多个分支。</li><li>simplesort - 只需传递一个属性名称，你的<code>resulset</code>就会按这个排序。</li><li>sort - 允许您提供自己的<code>比较函数</code>来对结果集进行排序。</li><li>compoundsort - 允许您<code>根据多个属性按升序或降序</code>排序。</li><li>update - 用于对当前结果集中的所有文档运行更新操作（JavaScript函数）。</li><li>remove - 从集合中删除当前处于结果集中的所有文档对象（以及结果集）</li><li>map - 映射到一个新的匿名集合中，提供一个映射函数</li><li>mapReduce - 允许您在当前结果集数据上指定map函数和reduce函数。</li><li>eqJoin - 左连接两组数据。连接键可以被定义或计算属性</li><li>transform - 在结果集级别，这需要一个原始转换数组。当开始一个链时，一个命名或原始的转换可能被传入链式方法。 (See the <a href="https://github.com/techfort/LokiJS/wiki/Collection-Transforms" target="_blank" rel="noopener">‘Collection Transforms’</a> wiki page for more details.)</li></ul><p>更好地使用<code>方法链</code>的例子可能如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results = coll.chain()</span><br><span class="line">                  .find(&#123;<span class="string">'Age'</span>: &#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;)</span><br><span class="line">                  .where(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> obj.Country.indexOf(<span class="string">'FR'</span>) === <span class="number">0</span>;</span><br><span class="line">                   &#125;)</span><br><span class="line">                  .simplesort(<span class="string">'Name'</span>)</span><br><span class="line">                  .offset(<span class="number">100</span>)</span><br><span class="line">                  .limit(<span class="number">25</span>)</span><br><span class="line">                  .data();</span><br></pre></td></tr></table></figure><h3 id="结果集分支-Resultset-branching"><a href="#结果集分支-Resultset-branching" class="headerlink" title="结果集分支(Resultset branching)"></a>结果集分支(Resultset branching)</h3><p>结果集及其结果并不意味着被“持有”。这些情况通常涉及利用动态视图来保持结果最新。但是，只要您想在发生任何插入/更新/删除之前，立即使用结果集，您可以随时临时分支<code>Resulset</code>。动态视图还允许分支结果集，而结果集又取其内部的结果集，并使用此分支来允许您进一步查询和转换其结果，而不会受到已执行过的过滤器的初始化时的影响。</p><p>集合分支的一个简单示例，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> baseResulset = coll.chain().find(&#123;<span class="string">'Age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">40</span>&#125;&#125;);</span><br><span class="line"><span class="keyword">var</span> branchedResulset = baseResultset.branch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> usResults = baseResultset.find(&#123;<span class="string">'Country'</span>: <span class="string">'US'</span>&#125;).data();</span><br><span class="line"><span class="keyword">var</span> ieResults = branchedResulset.find(&#123;<span class="string">'Country'</span>: <span class="string">'IE'</span>&#125;).data();</span><br></pre></td></tr></table></figure><p>如果基础查询耗费时间，则您的后续分支无需承担该通用成本，这样做的好处是。在大型集合或对时间敏感的应用程序中，分支通常更有用。</p><p>如果您需要检查链中各个阶段的<code>data()</code>或文档计数，则可以保留结果集（即使未分支时）以将链分成几个部分。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>尽可能在’Where’查询之前使用’Find’查询。</strong>如果它们被应用并与您的查询有关，则<strong>“Find”查询能够使用索引</strong>。</p><p><strong>核心（Collection）的查询方法（<code>Collection.where(), Collection.find(), Collection.findOne(), Collection.by()</code>）是学习<code>lokijs</code>的最佳方法。对于许多应用程序来说，这可能足以满足您的查询需求。</strong>不可用的功能(尚未提供)是排序(sorting)，限制(limiting)，偏移(offsets)和其他更高级别的转换。</p><hr><p><strong>链查询通过调用<code>collection.chain()</code>方法返回的<code>Resultset</code>类来完成。</strong></p><p>这样做，为我们的查询建立一个<code>state</code>。您可以将多个<code>查找(find)</code>，<code>过滤(where)</code>，<code>排序(sorts)</code>，<code>限制(limit)</code>，<code>偏移(offset)</code>等操作串在一起，逐步过滤和转换结果。</p><p>您也可以建立查询分支，尽可能高效地将查询分解为多个方向。通过结果集进行<code>链调用</code>仍然用于即时评估。</p><p>如果您将结果集保留在内存中，则不保证底层数据发生更改时保持最新状态。</p><p>只有第一个链的操作可能会使用数据库过滤器，因此优先考虑最昂贵的<code>find()</code>过滤器（其中应用了索引）作为第一个链接操作。</p><hr><p><strong>通过<code>链变换</code>允许在对象中定义与方法链相同的功能，其功能类似于<code>存储过程</code>。</strong></p><p>由于它是对象表示，因此可以（可选）命名并与数据库一起保存。此方法也用于即时评估。</p><hr><p><strong><code>DynamicViews</code>旨在让<code>fresh</code>的数据库视图随时可用。</strong></p><p>您可以应用<code>find</code>和<code>where</code>过滤器，并指定排序。</p><p><u>随着文档的插入，更新或删除，您查看的内容将立即保持最新状态。</u></p><p>这可以确保您的视图具有最佳的读取性能，因为它始终处于最新状态。</p><p>如果您的视图需要进一步过滤，则可以将结果集从其中分离出来。</p><p>在分支<code>DynamicView</code>的时候，您可以在该时刻捕获<code>DynamicView</code>内部结果集的快照，从而可以执行各种各样的链接操作以进行即时评估。</p><p>因此，如果您执行<code>DynamicView</code>分支，请将视图视为保证<code>fresh</code>，并将分支视为快速一次性分支进行评估。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;注意：我们现在在这个库的’examples’子文件夹中有几个快速入门示例。&quot;&gt;&lt;a href=&quot;#注意：我们现在在这个库的’examples’子文件夹中有几个快速入门示例。&quot; class=&quot;headerlink&quot; title=&quot;注意：我们现在在这个库的’examp
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>索引和查询性能</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs2_index_query/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs2_index_query/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.112Z</updated>
    
    <content type="html"><![CDATA[<p><code>Loki.js</code>一直是快速的内存数据库解决方案。事实上，最近的基准测试表明，在<code>node.js</code>下运行的终端<code>Core i5</code>中，其主要的<code>get()</code>操作速度约为每秒140万次。<code>get()</code> 操作利用一个自动生成的 <code>&#39;$loki</code> id 列和自己生成的二进制索引。如果您希望提供您自己的<code>unique key</code>，则可以添加单个唯一的索引到集合中，便可使用<code>collection.by()</code>方法进行获取。这种方法比使用内置的<code>$loki</code>  id快得多。因此，如果您打算进行单一对象查找，就可以获得此优化的性能。</p><h3 id="使用自动生成的-loki列查找示例"><a href="#使用自动生成的-loki列查找示例" class="headerlink" title="使用自动生成的$loki列查找示例 :"></a>使用自动生成的<code>$loki</code>列查找示例 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = db.addCollection(<span class="string">"users"</span>);</span><br><span class="line"><span class="keyword">var</span> resultObj = users.insert(&#123;<span class="attr">username</span>:<span class="string">"Heimdallr"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们的对象已经被插入，它将会添加一个`$loki`属性</span></span><br><span class="line"><span class="keyword">var</span> heimdallr = users.get(resultObj.$loki);</span><br></pre></td></tr></table></figure><h3 id="示例对象查找指定您自己的唯一索引"><a href="#示例对象查找指定您自己的唯一索引" class="headerlink" title="示例对象查找指定您自己的唯一索引 :"></a>示例对象查找指定您自己的唯一索引 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = db.addCollection(<span class="string">"users"</span>, &#123;</span><br><span class="line">    unique: [<span class="string">'username'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入记录后，您可能会使用coll.by()检索记录</span></span><br><span class="line"><span class="keyword">var</span> result = users.by(<span class="string">"username"</span>, <span class="string">"Heimdallr"</span>);</span><br></pre></td></tr></table></figure><h3 id="‘Find’-过滤"><a href="#‘Find’-过滤" class="headerlink" title="‘Find’ 过滤"></a>‘Find’ 过滤</h3><p>更通用的查询方式是使用接受<code>mongo</code>风格查询对象的<code>collection.find()</code>。如果您没有为正在搜索的列添加索引，可以在<code>node.js</code>下获得预期约 <code>20k ops/sec</code> (浏览器性能可能会有所不同，但这是一个很好的数量级)。对于大多数情况下，性能可能比需要的更高，但现在可以在对象属性上应用<code>loki.js</code>二进制索引。使用<code>collection.ensureIndex(propertyName)</code>方法，您可以创建一个可以被各种<code>find()</code>操作使用的索引，例如<code>collection.find()</code>。对于我们的测试基准，这会将性能提高到大约<code>500k ops/sec</code>。</p><p>二进制索引可以与范围操作符一起使用，返回给定<code>属性/范围</code>的多个文档结果。<strong>如果您已将二进制索引应用于属性，则可以通过使用包含该属性的查询对象调用<code>collection.find()</code>来利用该索引。</strong>能够使用二进制索引的<code>find()</code>操作符包括<code>$eq, $aeq, $lt, $lte, $gt, $gte, $between, $in.</code></p><blockquote><p>默认情况下，如果您在属性上应用了二进制索引，并且将包含JavaScript Date对象的文档作为该属性的值插入，则 <code>loki</code> 将用可序列化安全的历元时间格式日期（整数）替换它。这是为了防止索引变得不可维护，如果我们将它保存为Date并将其作为字符串加载（它们就可以不同的顺序排序）。如果你不打算保存你的数据库（完全在内存中使用），你可以在创建集合时传递一个<code>&#39;serializableIndices：false&#39;</code>选项，我们不会改变你的日期。</p></blockquote><h3 id="二进制索引示例"><a href="#二进制索引示例" class="headerlink" title="二进制索引示例 :"></a>二进制索引示例 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coll = db.addCollection(<span class="string">'users'</span>, &#123;</span><br><span class="line">  indices: [<span class="string">'location'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入记录后，您可以使用相等或范围操作符,如这种隐式 (strict) $eq op :</span></span><br><span class="line"><span class="keyword">var</span> results = users.find(&#123; <span class="attr">location</span>:  <span class="string">'Himinbjörg'</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Loki-的排序和范围"><a href="#Loki-的排序和范围" class="headerlink" title="Loki 的排序和范围"></a>Loki 的排序和范围</h3><blockquote><p>Native JavaScript提供 <code>==</code>（abstract）相等，<code>===</code>（strict）相等，<code>&lt;</code>（abstract）小于，<code>&gt;</code>（abstract）大于等等。JavaScript处理很多混合类型，所以你可能想要一个数字4（abstract）等于字符串’4’。如果你想测试’小于’4，它会默认转换为字符串，所以如果你不想要字符串，你将不得不使用<code>&#39;typeof&#39;</code>或其他类型检测来手动过滤掉其他类型。Loki倾向于处理纯数据，但必须动态变化以支持额外发现的各种“脏”数据。因此，我们试图调整“范围”的概念，因为它涉及属性上的混合类型，以便它们适应混合类型，并提供类似的<code>find()</code>结果，而不管您是否使用二进制索引。</p></blockquote><ul><li><code>loki</code>中的所有值都被我们的<code>find()</code>操作解释为“小于”，“大于” 或 “等于” 任何其他值。这与JavaScript不同，所以<code>loki</code>在两个值之间建立了统一的范围排序。</li><li>4 是 <code>$aeq</code> (非严格等于) <code>&#39;4&#39;</code>, 正如 <code>&#39;3&#39; $lt(小于) 4</code>, 和 <code>4 is $gte(大于) &#39;3&#39;</code>, 所以混合数字和’数字’字符串范围在<code>loki</code>中查找数字。</li><li>‘数字’字符串与’非数字’字符串保持在不同的范围（数字），所以<code>9999</code>将会是<code>$lt &#39;111asdf&quot;</code>。</li><li>对象都是平等的（除非使用点符号来查询对象属性）。</li><li>日期按照他们的纪元时间排序为数字……这些数字很大，一般在数字范围的顶端。</li><li><code>$type op</code>可用于过滤不符合特定<code>JavaScript</code>类型的结果。</li><li><code>$finite op</code> 可用于过滤出“数字”或“非数字”的结果。</li></ul><h3 id="‘Where’-过滤器"><a href="#‘Where’-过滤器" class="headerlink" title="‘Where’ 过滤器"></a>‘Where’ 过滤器</h3><p><strong>如果性能受到关注，应该谨慎使用’Where’过滤器（JavaScript过滤器函数）。他们无法使用索引，因此性能不会比未索引查找更好，并且取决于过滤器函数的复杂性，甚至更少。</strong>Unindex查询以及过滤器始终需要完整阵列扫描的位置，但如果数千ops/sec足够用，或稍后在查询链或动态视图过滤器管道中使用，并且惩罚更少，则它们可能非常有用。</p><h3 id="在查询链中进行索引"><a href="#在查询链中进行索引" class="headerlink" title="在查询链中进行索引"></a>在查询链中进行索引</h3><p><code>Resultset</code>类引入了<code>方法链</code>作为查询选项。您可以使用<code>方法链</code>来连续应用几个查找操作，或者将<code>find()</code>，<code>where()</code>和<code>sort()</code>操作混合到<code>顺序链式</code>管道中。为了简单起见，这个例子可能是（其中用户是一个集合对象）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.chain().find(queryObj).where(queryFunc).simplesort(&apos;name&apos;).data();</span><br></pre></td></tr></table></figure><p>检查这个语句，如果<code>queryObj</code>（一个mongo风格的查询对象）是<code>{&#39;age&#39;：{&#39;$ gt&#39;：30}}</code>，那么这个年龄段列表最好应用一个索引，并且<code>find()</code>链操作应该在<code>方法链</code>中排名第一。<strong>在链式操作中，只有第一个链式过滤器可以利用索引进行过滤。</strong>如果它筛选出足够数量的记录，那么（where）查询函数的影响会更小。保留过滤结果集的开销比<code>collection.find</code>降低了20％左右，但是它们的功能更强大。在我们的基准测试中，这仍然大约是 <strong>400k  ops/sec</strong>。</p><h3 id="索引和排序"><a href="#索引和排序" class="headerlink" title="索引和排序"></a>索引和排序</h3><p>如果没有应用过滤器，并且（例如）’name’属性上存在二进制索引，则可以充分利用二进制索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coll.chain().simplesort(&apos;name&apos;).data();</span><br></pre></td></tr></table></figure><p>如果发生了过滤，我们将检测我们是否可以利用<code>&#39;索引相交&#39;</code>算法中的索引来加速对典型<code>loki</code>排序的排序。只有在结果集中的结果集总数超过10％的情况下，才会启用此’索引相交’算法，否则标准loki排序将被确定为更快的方法。“索引相交”的性能优势与过滤质量有些成反比，因此它利用二进制索引来帮助减少“最坏情况”的分类处罚。</p><p><strong><code>Loki sorting</code> 不仅用于排序，还用于构建二进制索引</strong>，但如果您不需要在混合类型中进行更加统一的排序，则可以通过调用以下方法将额外的毫秒数排除在排序调用之外：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coll.chain().simplesort(&apos;name&apos;, &#123; useJavascriptSorting: true &#125;).data();</span><br></pre></td></tr></table></figure><p>如果在<code>&#39;name&#39;</code>属性中存在二进制索引，我们将使用索引相交算法，除非<code>resultset</code>具有10％或更少的文档总数，此时我们将回退到传递给<code>simplesort</code>的属性上的JavaScript排序。如果您没有在该属性上应用二进制索引，那么如果该选项已通过，我们将始终使用JavaScript排序。</p><h2 id="动态视图管道"><a href="#动态视图管道" class="headerlink" title="动态视图管道"></a>动态视图管道</h2><p>动态视图的行为与结果集[resultsets]相似，因为您要使用索引，必须使用第一个过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userview = users.addDynamicView(<span class="string">"over30"</span>);</span><br><span class="line">userview.applyFind(&#123;<span class="string">'Age'</span>: &#123;<span class="string">'$gte'</span>:<span class="number">30</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以随时获取最新的视图结果</span></span><br><span class="line"><span class="keyword">var</span> results = userview.data();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或对结果集进一步过滤</span></span><br><span class="line">results = userview.branchResultset().find(&#123;<span class="string">'Country'</span>: <span class="string">'JP'</span>&#125;).data();</span><br></pre></td></tr></table></figure><p>该查找过滤器理想情况下应引用您已应用索引（在此情况下为“年龄”）的字段。但是，动态视图运行一次它们的过滤器，因此即使是非高性能查询管道在建立之后也是快速的。这是由于在插入，更新或从集合中删除单个对象时重新评估这些过滤器。作为单个对象评估，在第一次评估期间不存在阵列扫描损失。动态视图的开销占据了结果集的顶部，将第一次评估的性能降低了大约40％，但后续查询得到了高度优化（比collection.find更快）。即使有这样的开销，我们的基准测试显示初始评估大约为30万[ops/sec]性能。根据更新频率的不同，后续评估可以扩展至每秒100万次以上。</p><p>在<code>loki.js</code>中，动态视图目前有两个选项，<code>&#39;persistent&#39;（默认为false</code>）和<code>&#39;sortPriority&#39;（默认为&#39;passive&#39;）</code>。</p><p><code>&#39;persistent&#39;</code>选项表示结果将保存在内部数组中（除了正常的结果集）。这个<code>&#39;resultdata&#39;</code>数组会根据您的规范进行过滤和排序。将结果复制到内部数组发生在第一次<code>data()</code>评估期间，或者一旦过滤器或排序将结果集污染（文档插入，更新，从视图中删除）。此选项会增加内存开销，但可能会优化<code>data()</code>调用。</p><p><code>&#39;sortPriority&#39;</code>选项可以是<code>&#39;passive&#39;或&#39;active&#39;</code>。默认情况下，当调用<code>data()</code>并将这些排序标记污染时，会进行懒惰<code>（&#39;passive&#39;）</code>。如果您希望排序成本为<code>“up-front”</code>，您可以指定<code>“active” sortPriority</code>。使用<code>active</code>的<code>sortPriority</code>，一旦插入/更新/删除将排序标记为脏，我们将排队并限制异步排序以在线程产生时运行。因此，如果更新频率较低或单独批量修改，则可以预先支付性能成本，以确保稍后获得最佳<code>data()</code>检索速度。如果您的数据修改频繁且零星，如果没有人读取数据，则有效的<code>sortPriority</code>可能会浪费计算排序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Loki.js&lt;/code&gt;一直是快速的内存数据库解决方案。事实上，最近的基准测试表明，在&lt;code&gt;node.js&lt;/code&gt;下运行的终端&lt;code&gt;Core i5&lt;/code&gt;中，其主要的&lt;code&gt;get()&lt;/code&gt;操作速度约为每秒140万次。&lt;c
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>LokiJS快速入门</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs1_overview/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs1_overview/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.112Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lokijs.org" target="_blank" rel="noopener">LokiJS.org web site</a><br><a href="https://github.com/techfort/LokiJS" target="_blank" rel="noopener">LokiJS GitHub page</a><br><a href="https://rawgit.com/techfort/LokiJS/master/examples/sandbox/LokiSandbox.htm" target="_blank" rel="noopener">Sandbox / Playground</a></p><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>LokiJS是一个面向文档的JavaScript数据库，与MongoDB有些相似。这只是一个概述，有关完整的文档，请参阅 <a href="http://lokijs.org/" target="_blank" rel="noopener">lokijs.org</a>.</p><p>它支持数据集合的索引，查询和过滤。LokiJS还支持更高级的功能，例如<code>mapReduce</code>，事务，并允许您实现自定义远程同步以将数据保存到服务器（或移动设备上的本地文件）。持久化到磁盘已经为<code>CommonJS</code>环境（如<code>nodejs</code>）实现，在移动设备上，您只需要请求文件系统并将<code>lokijs</code>的<code>serialize()</code> 作为内容传递。</p><p>在浏览器或移动环境中，您只需要包含<code>build/lokijs.min.js</code></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="1-面向文档"><a href="#1-面向文档" class="headerlink" title="1. 面向文档"></a>1. 面向文档</h3><p>数据存储为JavaScript对象，并序列化为JSON以用于磁盘持久化。</p><h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h3><p>您可以指定索引以加快对某些对象属性的搜索。’id’字段自动编入索引，并使用二进制搜索算法来避免<code>for(;;)</code>循环变慢</p><h3 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h3><p>您可以声明自定义视图函数用以返回基于复杂逻辑的结果集。</p><h3 id="4-Map-reduce"><a href="#4-Map-reduce" class="headerlink" title="4. Map reduce"></a>4. Map reduce</h3><p>您可以声明<code>map</code>和<code>reduce</code>函数以检索数据库中的聚合数据。</p><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p>如果您在<code>node.js</code>环境中工作，请运行 <code>npm install lokijs</code> 并确保调用 <code>var loki = require(&#39;lokijs&#39;)</code></p><p>创建数据库:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> loki(<span class="string">'Example'</span>);</span><br></pre></td></tr></table></figure><p>创建一个集合，指定名称，类型，索引字段以及集合是否是事务性的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = db.addCollection(<span class="string">'users'</span>, &#123; <span class="attr">indices</span>: [<span class="string">'email'</span>] &#125;);</span><br><span class="line"><span class="comment">// 请注意，索引可以是单个字符串或字符串数组</span></span><br></pre></td></tr></table></figure><p>请注意，索引和事务标志是可选参数。<code>LokiJS</code>中的事务只是允许您运行操作并自动将数据库恢复到事务开始之前的阶段（如果发生错误）。</p><p>在数据库中添加一些用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var odin = users.insert( &#123; name : &apos;odin&apos;, email: &apos;odin.soap@lokijs.org&apos;, age: 38 &#125; );</span><br><span class="line">var thor = users.insert( &#123; name : &apos;thor&apos;, email : &apos;thor.soap@lokijs.org&apos;, age: 25 &#125; );</span><br><span class="line">var stan = users.insert( &#123; name : &apos;stan&apos;, email : &apos;stan.soap@lokijs.org&apos;, age: 29 &#125; );</span><br><span class="line">var oliver = users.insert( &#123; name : &apos;oliver&apos;, email : &apos;oliver.soap@lokijs.org&apos;, age: 31 &#125; );</span><br><span class="line">var hector = users.insert( &#123; name : &apos;hector&apos;, email : &apos;hector.soap@lokijs.org&apos;, age: 15&#125; );</span><br><span class="line">var achilles = users.insert( &#123; name : &apos;achilles&apos;, email : &apos;achilles.soap@lokijs.org&apos;, age: 31 &#125; );</span><br></pre></td></tr></table></figure><p>操作更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stan.name = &apos;Stan Laurel&apos;;</span><br><span class="line">// 更新对象（这实际上只是同步索引）</span><br><span class="line">users.update(stan);</span><br></pre></td></tr></table></figure><p>动态视图 (DynamicViews) - 推荐方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var dv = users.addDynamicView(&apos;a_complex_view&apos;);</span><br><span class="line">dv.applyWhere(function aCustomFilter(obj)&#123;</span><br><span class="line">  return obj.name.length  &lt; 5 &amp;&amp; obj.age &gt; 30;</span><br><span class="line">&#125;);</span><br><span class="line">// 查看数据</span><br><span class="line">console.log(dv.data());</span><br><span class="line"></span><br><span class="line">// 应用一些更改</span><br><span class="line">users.insert(&#123; name: &apos;ratatosk&apos;, email: &apos;rata@tosk.r&apos;, age: 10320 &#125;);</span><br><span class="line"></span><br><span class="line">// 看看动态视图通过检查数据来更新自己</span><br><span class="line">console.log(dv.data());</span><br></pre></td></tr></table></figure><p>‘Where’ 过滤函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function ageView(obj)&#123;</span><br><span class="line">  return obj.age &gt; 30;</span><br><span class="line">&#125;</span><br><span class="line">// 更复杂一些，名字长于3个字符，年龄超过30岁的用户</span><br><span class="line">function aCustomFilter(obj)&#123;</span><br><span class="line">  return obj.name.length  &lt; 5 &amp;&amp; obj.age &gt; 30;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试过滤器</span><br><span class="line">var result = users.where(ageView);</span><br><span class="line">var anotherResult = users.where(aCustomFilter);</span><br></pre></td></tr></table></figure><p>Map Reduce (实时演示示例在 <a href="http://lokijs.org/#/demo" target="_blank" rel="noopener">lokijs.org</a> 上):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function getDuration( obj )&#123;</span><br><span class="line">  return obj.complete ? null : obj.duration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getAverage( array )&#123;</span><br><span class="line">  var cumulator = 0;</span><br><span class="line">  var i = array.length &gt;&gt;&gt; 0;</span><br><span class="line">  var actual = 0;</span><br><span class="line">  while(i--)&#123;</span><br><span class="line">    if(array[i] != null)&#123;</span><br><span class="line">      cumulator += array[i];</span><br><span class="line">      actual++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return ( cumulator / actual).toFixed(2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var avgDuration = todos.mapReduce( getDuration, getAverage );</span><br></pre></td></tr></table></figure><p>通过方法链查询 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">users.chain()</span><br><span class="line">  .find(&#123;&apos;age&apos;:&#123;&apos;$gt&apos;: 25&#125;&#125;)</span><br><span class="line">  .where(function(obj)&#123; return obj.name.indexOf(&quot;in&quot;) != -1 &#125;)</span><br><span class="line">  .simplesort(&quot;age&quot;)</span><br><span class="line">  .offset(50)</span><br><span class="line">  .limit(10)</span><br><span class="line">  .data()</span><br></pre></td></tr></table></figure><p>简单的命名变换 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">users.addTransform(&apos;progeny&apos;, [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;find&apos;,</span><br><span class="line">    value: &#123;</span><br><span class="line">      &apos;age&apos;: &#123;&apos;$lte&apos;: 40&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;simplesort&apos;,</span><br><span class="line">    property: &apos;age&apos;,</span><br><span class="line">    desc: true</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">var results = users.chain(&apos;progeny&apos;).data();</span><br></pre></td></tr></table></figure><p>更多信息:</p><ul><li>访问 : <a href="http://www.lokijs.org/" target="_blank" rel="noopener">www.lokijs.org</a></li><li>示例 : <a href="https://github.com/techfort/LokiJS/tree/master/examples" target="_blank" rel="noopener">https://github.com/techfort/LokiJS/tree/master/examples</a></li><li>StackOverflow : <a href="https://stackoverflow.com/questions/tagged/lokijs" target="_blank" rel="noopener">https://stackoverflow.com/questions/tagged/lokijs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://lokijs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LokiJS.org web site&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/techfort/LokiJS&quot; target
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>集合变换</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs6_collection_transforms/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs6_collection_transforms/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合变换"><a href="#集合变换" class="headerlink" title="集合变换"></a>集合变换</h2><hr><p><strong>集换背后的基本思想是允许将结果集的“链”式调用过程转换为该过程的对象定义。这个数据定义可以随意命名，并与集合一起保存在数据库中。</strong></p><p>这可能对以下方面有用：</p><ul><li>编写在loki数据库上运行的工具</li><li>创建’存储过程’的命名查询</li><li>转换您的数据以便提取</li><li>可以通过自定义<code>meta</code>进行扩展</li></ul><p>变换是在集合链上执行的(有序)“步骤(step)”对象数组。这些步骤可能包括以下类型：</p><ul><li>‘find’</li><li>‘where’</li><li>‘simplesort’</li><li>‘compoundsort’</li><li>‘sort’</li><li>‘limit’</li><li>‘offset’</li><li>‘update’</li><li>‘remove’</li><li>‘map’</li><li>‘mapReduce’</li><li>‘eqJoin’</li></ul><p>这些转换步骤可以硬编码它们的参数，或者为<code>loki变换</code>添加参数替换机制。</p><p>一个简单的示例，只有一个步骤的<code>loki变换</code>可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var tx = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;find&apos;,</span><br><span class="line">    value: &#123;</span><br><span class="line">      &apos;owner&apos;: &apos;odin&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后可以使用以下命令将其选择性地保存到集合中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userCollection.addTransform(&apos;OwnerFilter&apos;, tx);</span><br></pre></td></tr></table></figure><p>这种转换可以通过以下任一方式执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userCollection.chain(&apos;OwnerFilter&apos;).data();</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userCollection.chain(tx).data();</span><br></pre></td></tr></table></figure><p>参数化在任何对象属性的右侧的值上得到处理，该值在变换中表示为以<code>&#39;[％lktxp]&#39;</code>开头的字符串。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var tx = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;find&apos;,</span><br><span class="line">    value: &#123;</span><br><span class="line">      &apos;owner&apos;: &apos;[%lktxp]OwnerName&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>要执行此链式调用，您需要在执行时传递包含该参数值的参数对象。一个例子可能是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var params = &#123;</span><br><span class="line">  OwnerName: &apos;odin&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">userCollection.chain(tx, params).data();</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userCollection.chain(&quot;OwnerFilter&quot;, params).data();</span><br></pre></td></tr></table></figure><p><strong>过滤功能无法保存到数据库中</strong>，但是如果您仍然需要它们，可以利用<code>转换和参数化</code>可以实现清晰的结构化并且可以执行保存的转换。一个例子可能是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var tx = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;where&apos;,</span><br><span class="line">    value: &apos;[%lktxp]NameFilter&apos;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">items.addTransform(&apos;ByFilteredName&apos;, tx);</span><br><span class="line"></span><br><span class="line">// 那么可能会立即发生以下情况，甚至可能在`保存/加载`周期中发生</span><br><span class="line">// 这个例子使用匿名函数，但也可以将其命名为函数引用</span><br><span class="line">var params = &#123;</span><br><span class="line">  NameFilter: function(obj) &#123;</span><br><span class="line">    return (obj.name.indexOf(&quot;nir&quot;) !== -1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var results = items.chain(&quot;ByFilteredName&quot;, params).data();</span><br></pre></td></tr></table></figure><p>转换可以包含多个要连续执行的步骤。在幕后，链命令将实例化一个<code>Resultset</code>并将其作为独立的链操作调用，最终在完成时返回结果。一些内置的“步骤(step)”，如<code>&#39;mapReduce&#39;</code>实际上通过返回一个数据数组来终止变换/链(transform/chain)，所以在这些情况下，<code>chain()</code>结果就是实际的数据，而不是你需要调用<code>data()</code>获取结果集。</p><p>更复杂的转换示例可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var tx = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;find&apos;,</span><br><span class="line">    value: &#123;</span><br><span class="line">      owner: &#123;</span><br><span class="line">        &apos;$eq&apos;: &apos;[%lktxp]customOwner&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;where&apos;,</span><br><span class="line">    value: &apos;[%lktxp]customFilter&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;limit&apos;,</span><br><span class="line">    value: &apos;[%lktxp]customLimit&apos;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function myFilter(obj) &#123;</span><br><span class="line">  return (obj.name.indexOf(&quot;nir&quot;) !== -1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var params = &#123;</span><br><span class="line">  customOwner: &apos;odin&apos;,</span><br><span class="line">  customFilter: myFilter,</span><br><span class="line">  customLimit: 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users.chain(tx, params);</span><br></pre></td></tr></table></figure><p>如上例所示，我们将扫描对象层次结构（深达10层），并对右边的参数进行参数替换，这些值看起来是参数，然后我们将尝试从您的参数对象中查找。参数替换将用与您的<code>params</code>中包含的值相同的值替换该字符串，该参数可以是任何数据类型。</p><p>某些具有多个参数的步骤需要特定的步骤属性（除了类型和值）。这些在下面被演示为单独的步骤，这些步骤在单个变换中不一定有意义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var step1 = &#123;</span><br><span class="line">  type: &apos;simplesort&apos;,</span><br><span class="line">  property: &apos;name&apos;,</span><br><span class="line">  desc: true</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var step2 = &#123;</span><br><span class="line">  type: &apos;mapReduce&apos;,</span><br><span class="line">  mapFunction: myMap,</span><br><span class="line">  reduceFunction: myReduce</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var step3 = &#123;</span><br><span class="line">  type: &apos;eqJoin&apos;,</span><br><span class="line">  joinData: jd,</span><br><span class="line">  leftJoinKey: ljk,</span><br><span class="line">  rightJoinKey: rjk,</span><br><span class="line">  mapFun: myMapFun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var step4 = &#123;</span><br><span class="line">  type: &apos;remove&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持-DynamicViews"><a href="#支持-DynamicViews" class="headerlink" title="支持 DynamicViews"></a>支持 DynamicViews</h2><p>您现在可以使用转换作为<code>DynamicView</code>的提取方法。某些应用程序可能会使用它创建一个包含广泛结果集的<code>DynamicView</code>，这些结果可以从用户定义的转换中快速提取。此功能在<code>DynamicView</code>的<code>branchResultset()</code>方法中提供。它可以接受存储在集合级别的原始转换或命名转换。</p><p>一个例子可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var db = new loki(&apos;test&apos;);</span><br><span class="line">var coll = db.addCollection(&apos;mydocs&apos;);</span><br><span class="line">var dv = coll.addDynamicView(&apos;myview&apos;);</span><br><span class="line">var tx = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;offset&apos;,</span><br><span class="line">    value: &apos;[%lktxp]pageStart&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: &apos;limit&apos;,</span><br><span class="line">    value: &apos;[%lktxp]pageSize&apos;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">coll.addTransform(&apos;viewPaging&apos;, tx);</span><br><span class="line"></span><br><span class="line">// add some records</span><br><span class="line"></span><br><span class="line">var results = dv.branchResultset(&apos;viewPaging&apos;, &#123; pageStart: 10, pageSize: 10 &#125;).data();</span><br></pre></td></tr></table></figure><p>重要的区别在于分支（以及因此您的转换结果）仅反映了您分支时的视图。这些转换是提取而不是内部用于视图。</p><h2 id="为定制解决方案添加元数据"><a href="#为定制解决方案添加元数据" class="headerlink" title="为定制解决方案添加元数据"></a>为定制解决方案添加元数据</h2><p>一种用于转换的用途可能是在用户界面构建，管理和执行这些转换时使用用户驱动的解决方案。在这种情况下，您可能需要将自己的元数据添加到变换中以进一步描述变换，步骤或参数。</p><ul><li>任何具有<code>Loki变换</code>未知类型的步骤都将被忽略。您可能会决定始终将第一步作为具有包含有关作者，描述或所需参数描述元数据信息的属性的“元”类型。</li><li>每个步骤还可以包含额外的属性，超出了我们所定义的要求，因此您可能会在步骤中嵌入步骤描述，上次更改的日期等。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Loki转换可以建立一个自动化数据转换的过程（只需很少的额外占用空间）。这不是必需的功能，也不是要取代方法链接，但它允许您抽象和组织重复的查询以实现清洁或动态目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;集合变换&quot;&gt;&lt;a href=&quot;#集合变换&quot; class=&quot;headerlink&quot; title=&quot;集合变换&quot;&gt;&lt;/a&gt;集合变换&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;集换背后的基本思想是允许将结果集的“链”式调用过程转换为该过程的对象定义。这个数据定义可以随意命名
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>自动更新集合</title>
    <link href="http://blog.lijunbo.com/2018/05/02/lokijs7_autoupdating_collections/"/>
    <id>http://blog.lijunbo.com/2018/05/02/lokijs7_autoupdating_collections/</id>
    <published>2018-05-02T01:12:51.000Z</published>
    <updated>2019-10-08T10:39:52.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合的自动更新功能"><a href="#集合的自动更新功能" class="headerlink" title="集合的自动更新功能"></a>集合的自动更新功能</h1><p>可以通过构造函数选项<code>autoupdate：true</code>在每个集合的基础上启用自动更新。该功能需要<code>Object.observe</code>（目前在<code>Chrome 36+</code>, <code>io.js</code> 和 <code>Node.js 0.12+</code>中实现）。如果观察者不可用，则该选项将被忽略。</p><p>无论何时修改文档，自动更新(<code>Autoupdate</code>)都会自动调用 <code>update(doc)</code>，这对索引更新和脏标记（用于确定数据库是否已被修改并应该保留）是必需的。</p><p>启用此功能基本上意味着，所有手动<code>update</code>呼叫都可以省略。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = collection.by(<span class="string">"name"</span>, <span class="string">"John"</span>);</span><br><span class="line"></span><br><span class="line">doc.name = <span class="string">"Peter"</span>;</span><br><span class="line">doc.age = <span class="number">32</span>;</span><br><span class="line">doc.gender = <span class="string">"male"</span>;</span><br><span class="line"></span><br><span class="line">collection.update(doc); <span class="comment">// 这行代码可以安全地删除。</span></span><br></pre></td></tr></table></figure><p>自动更新(<code>Autoupdate</code>)将在当前事件循环结束时调用 <code>update</code> ，因此即使在进行多项更改时也只会调用 <code>update</code> 一次。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>自动更新和手动更新之间有一个重要区别。例如，如果文档更改违反了唯一键约束，<code>update</code>将同步抛出一个可以同步捕获的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var collection = db.addCollection(&quot;test&quot;, &#123;</span><br><span class="line">  unique: [&quot;name&quot;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">collection.insert(&#123; name: &quot;Peter&quot; &#125;);</span><br><span class="line"></span><br><span class="line">var doc = collection.insert(&#123; name: &quot;Jack&quot; &#125;);</span><br><span class="line">doc.name = &quot;Peter&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  collection.update(doc);</span><br><span class="line">&#125; catch(err) &#123;</span><br><span class="line">  doc.name = &quot;Jack&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于自动更新(<code>Autoupdate</code>)异步调用更新，因此无法通过<code>try-catch</code>捕获错误。相反，你必须使用事件监听器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var collection = db.addCollection(&quot;test&quot;, &#123;</span><br><span class="line">  unique: [&quot;name&quot;],</span><br><span class="line">  autoupdate: true</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">collection.insert(&#123; name: &quot;Peter&quot; &#125;);</span><br><span class="line"></span><br><span class="line">var doc = collection.insert(&#123; name: &quot;Jack&quot; &#125;);</span><br><span class="line">doc.name = &quot;Peter&quot;;</span><br><span class="line"></span><br><span class="line">collection.on(&quot;error&quot;, function(errDoc) &#123;</span><br><span class="line">  if(errDoc === doc) &#123;</span><br><span class="line">    doc.name = &quot;Jack&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这可能会变得非常繁琐，因此您应该考虑在更新文档之前进行检查。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合的自动更新功能&quot;&gt;&lt;a href=&quot;#集合的自动更新功能&quot; class=&quot;headerlink&quot; title=&quot;集合的自动更新功能&quot;&gt;&lt;/a&gt;集合的自动更新功能&lt;/h1&gt;&lt;p&gt;可以通过构造函数选项&lt;code&gt;autoupdate：true&lt;/code&gt;在每个集
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js和NPM版本的升级</title>
    <link href="http://blog.lijunbo.com/2018/04/21/2018-04-21-node-update/"/>
    <id>http://blog.lijunbo.com/2018/04/21/2018-04-21-node-update/</id>
    <published>2018-04-21T06:49:48.000Z</published>
    <updated>2019-10-08T10:39:52.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="升级-node-js"><a href="#升级-node-js" class="headerlink" title="升级 node.js"></a>升级 node.js</h2><p>npm中有一个模块叫做“n”，专门用来管理node.js版本的。</p><p>更新到最新的稳定版只需要在命令行中打下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br><span class="line">n stable</span><br></pre></td></tr></table></figure><blockquote><p>注意：Linux系统需要添加sudo权限</p><p>eg: sudo npm install -g n</p></blockquote><p>如需最新版本则用<code>n latest</code></p><p><img src="https://segmentfault.com/img/remote/1460000009025886?w=562&amp;h=128" alt="img"></p><p>当然，n后面也可以跟具体的版本号：<code>n v6.2.0</code></p><blockquote><p>具体细节参见 <a href="https://github.com/tj/n" target="_blank" rel="noopener">n模块的GitHub</a></p><p>相关资料 <a href="https://github.com/muwenzi/Program-Blog/issues/6" target="_blank" rel="noopener">用n管理不同版本的Node</a> </p></blockquote><h2 id="升级-npm"><a href="#升级-npm" class="headerlink" title="升级 npm"></a>升级 npm</h2><p>npm升级就更简单了，只需要在终端中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm@latest</span><br></pre></td></tr></table></figure><blockquote><p>具体可参见阮一峰的<a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="noopener">【NPM模块管理器】</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;升级-node-js&quot;&gt;&lt;a href=&quot;#升级-node-js&quot; class=&quot;headerlink&quot; title=&quot;升级 node.js&quot;&gt;&lt;/a&gt;升级 node.js&lt;/h2&gt;&lt;p&gt;npm中有一个模块叫做“n”，专门用来管理node.js版本的。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="CST" scheme="http://blog.lijunbo.com/categories/CST/"/>
    
    
      <category term="Software" scheme="http://blog.lijunbo.com/tags/Software/"/>
    
      <category term="Server" scheme="http://blog.lijunbo.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu上安装MongoDB社区版</title>
    <link href="http://blog.lijunbo.com/2018/04/02/ubuntu_mongo_install/"/>
    <id>http://blog.lijunbo.com/2018/04/02/ubuntu_mongo_install/</id>
    <published>2018-04-02T07:21:47.000Z</published>
    <updated>2019-10-08T10:39:52.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>使用本教程在使用<code>.deb</code>软件包的LTS Ubuntu Linux 系统上安装MongoDB社区版。</p><blockquote><p><strong>重要的</strong></p><p>由Ubuntu提供的非官方<code>mongodb</code>包不是由MongoDB维护的。您应该始终使用官方的MongoDB <code>mongodb-org</code>软件包，它们随时与最新的MongoDB的主版本和次要版本保持同步。</p></blockquote><blockquote><p><strong>支持平台</strong></p><p>MongoDB仅提供64位 LTS(长期支持) Ubuntu 发行版的软件包。</p><p>例如，12.04 LTS (precise)，14.04 LTS (trusty)，16.04 LTS (xenial)等等。</p><p>这些软件包可能与其他Ubuntu发行版一起使用，但是，它们不受支持。</p><p>MongoDB 3.6 放弃了对 Ubuntu 12.04 LTS (precise) 的支持。</p></blockquote><blockquote><p><strong>在IBM电脑系统上，Ubuntu 16.04需要更新软件包</strong></p><p>由于Ubuntu 16.04的旧版<code>glibc</code>软件包存在锁定漏洞问题，因此在运行MongoDB之前，必须将<code>glibc</code>软件包升级至<code>glibc 2.23-0ubuntu5</code>。</p><p>具有旧版本<code>glibc</code>软件包的系统将由于随机内存损坏而遇到数据库服务器崩溃和不正常行为，并且不适合MongoDB的生产部署</p></blockquote><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>MongoDB在他们自己的仓库中提供官方支持的软件包。此库包含以下软件包：</p><table><thead><tr><th>包名</th><th>描述</th></tr></thead><tbody><tr><td><code>mongodb-org</code></td><td>一个元数据包，将自动安装下面列出的四个组件包。</td></tr><tr><td><code>mongodb-org-server</code></td><td>包含<code>mongod</code>守护进程和相关的配置以及init脚本。</td></tr><tr><td><code>mongodb-org-mongos</code></td><td>包含<code>mongos</code>守护进程。</td></tr><tr><td><code>mongodb-org-shell</code></td><td>包含<code>mongo</code> shell。</td></tr><tr><td><code>mongodb-org-tools</code></td><td>包含以下MongoDB工具: <a href="https://docs.mongodb.com/master/reference/program/mongoimport/#bin.mongoimport" target="_blank" rel="noopener"><code>mongoimport</code></a> <a href="https://docs.mongodb.com/master/reference/program/bsondump/#bin.bsondump" target="_blank" rel="noopener"><code>bsondump</code></a>, <a href="https://docs.mongodb.com/master/reference/program/mongodump/#bin.mongodump" target="_blank" rel="noopener"><code>mongodump</code></a>, <a href="https://docs.mongodb.com/master/reference/program/mongoexport/#bin.mongoexport" target="_blank" rel="noopener"><code>mongoexport</code></a>, <a href="https://docs.mongodb.com/master/reference/program/mongofiles/#bin.mongofiles" target="_blank" rel="noopener"><code>mongofiles</code></a>, <a href="https://docs.mongodb.com/master/reference/program/mongoperf/#bin.mongoperf" target="_blank" rel="noopener"><code>mongoperf</code></a>, <a href="https://docs.mongodb.com/master/reference/program/mongorestore/#bin.mongorestore" target="_blank" rel="noopener"><code>mongorestore</code></a>, <a href="https://docs.mongodb.com/master/reference/program/mongostat/#bin.mongostat" target="_blank" rel="noopener"><code>mongostat</code></a>, 和 <a href="https://docs.mongodb.com/master/reference/program/mongotop/#bin.mongotop" target="_blank" rel="noopener"><code>mongotop</code></a>.</td></tr></tbody></table><p><code>mongodb-org-server</code>软件包提供了一个初始化脚本，它使用<code>/etc/mongod.conf</code>配置文件启动<code>mongod</code>。</p><p>有关使用此初始化脚本的详细信息，请参阅<a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/#run-mongodb-community-edition" target="_blank" rel="noopener">运行MongoDB社区版</a> 。</p><p>这些软件包与Ubuntu提供的<code>mongodb</code>，<code>mongodb-server</code>和<code>mongodb-clients</code>软件包相冲突。</p><p>默认情况下，软件包提供的默认<code>/etc/mongod.conf</code>配置文件的<code>bind_ip</code>设置为127.0.0.1。在<a href="https://docs.mongodb.com/master/reference/glossary/#term-replica-set" target="_blank" rel="noopener">初始化副本集</a>之前根据您的环境需要修改此设置。</p><h2 id="安装-MongoDB-社区版"><a href="#安装-MongoDB-社区版" class="headerlink" title="安装 MongoDB 社区版"></a>安装 MongoDB 社区版</h2><blockquote><p>注意</p><p>要安装不同版本的MongoDB，请参阅该版本的文档。例如，参见<a href="https://docs.mongodb.com/v3.4/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noopener">3.4</a>版。</p></blockquote><h3 id="1-导入包管理系统使用的公钥"><a href="#1-导入包管理系统使用的公钥" class="headerlink" title="1. 导入包管理系统使用的公钥."></a>1. 导入包管理系统使用的公钥.</h3><p>Ubuntu软件包管理工具（即<code>dpkg</code>和<code>apt</code>）通过要求分销商使用<code>gpg</code>密钥对软件包进行签名来确保软件包的一致性和真实性。发出以下命令来导入<a href="https://www.mongodb.org/static/pgp/server-3.6.asc" target="_blank" rel="noopener">MongoDB 公共 GPG 密钥</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5</span><br></pre></td></tr></table></figure><h3 id="2-为MongoDB创建软件源list文件"><a href="#2-为MongoDB创建软件源list文件" class="headerlink" title="2. 为MongoDB创建软件源list文件."></a>2. 为MongoDB创建软件源list文件.</h3><p>使用适合您的Ubuntu版本的命令创建<code>/etc/apt/sources.list.d/mongodb-org-3.6.list</code>软件源list文件：</p><ul><li><p>Ubuntu 12.04 (deprecated)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</span><br></pre></td></tr></table></figure></li><li><p>Ubuntu 14.04</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</span><br></pre></td></tr></table></figure></li><li><p>Ubuntu 16.04</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-重新加载本地包数据库"><a href="#3-重新加载本地包数据库" class="headerlink" title="3. 重新加载本地包数据库."></a>3. 重新加载本地包数据库.</h3><p>发出以下命令以重新加载本地包数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="4-安装-MongoDB-包"><a href="#4-安装-MongoDB-包" class="headerlink" title="4. 安装 MongoDB 包."></a>4. 安装 MongoDB 包.</h3><h4 id="安装最新的稳定版本的MongoDB"><a href="#安装最新的稳定版本的MongoDB" class="headerlink" title="安装最新的稳定版本的MongoDB."></a>安装最新的稳定版本的MongoDB.</h4><p>发出以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><h4 id="安装指定版本的MongoDB"><a href="#安装指定版本的MongoDB" class="headerlink" title="安装指定版本的MongoDB."></a>安装指定版本的MongoDB.</h4><p>要安装特定版本，必须单独指定每个组件包以及版本号，如下例所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org=3.6.3 mongodb-org-server=3.6.3 mongodb-org-shell=3.6.3 mongodb-org-mongos=3.6.3 mongodb-org-tools=3.6.3</span><br></pre></td></tr></table></figure><p>如果您只安装<code>mongodb-org = 3.6.3</code>并且不包含组件软件包，则无论您指定了哪个版本，都会安装每个<code>mongodb</code>软件包的最新版本。</p><h4 id="固定一个特定版本的MongoDB"><a href="#固定一个特定版本的MongoDB" class="headerlink" title="固定一个特定版本的MongoDB."></a>固定一个特定版本的MongoDB.</h4><p>尽管您可以指定任何可用的MongoDB版本，但<code>apt-get</code>会在新版本可用时升级软件包。以防止意外升级，固定包装。要在当前安装的版本上固定MongoDB的版本，请发出以下命令序列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;mongodb-org hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-server hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-shell hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-mongos hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-tools hold&quot; | sudo dpkg --set-selections</span><br></pre></td></tr></table></figure><h2 id="运行-MongoDB-社区版"><a href="#运行-MongoDB-社区版" class="headerlink" title="运行 MongoDB 社区版"></a>运行 MongoDB 社区版</h2><p>大多数类Unix操作系统会限制会话可能使用的系统资源。这些限制可能会对MongoDB操作产生负面影响。有关更多信息，请参阅 <a href="https://docs.mongodb.com/master/reference/ulimit/" target="_blank" rel="noopener">UNIX ulimit</a> 设置。</p><p>MongoDB实例默认将其数据文件存储在 <code>/var/lib/mongodb</code> 及其日志文件 <code>/var/log/mongodb</code>中，并使用<code>mongodb</code>用户帐户运行。您可以在<code>/etc/mongod.conf</code>中指定备用日志和数据文件目录。有关其他信息，请参阅 <a href="https://docs.mongodb.com/master/reference/configuration-options/#systemLog.path" target="_blank" rel="noopener"><code>systemLog.path</code></a> 和 <a href="https://docs.mongodb.com/master/reference/configuration-options/#storage.dbPath" target="_blank" rel="noopener"><code>storage.dbPath</code></a> 。</p><p>如果更改运行MongoDB进程的用户，则必须修改<code>/var/lib/mongodb</code> 和 <code>/var/log/mongodb</code> 目录的访问控制权限，以使该用户可以访问这些目录。</p><h3 id="1-启动-MongoDB"><a href="#1-启动-MongoDB" class="headerlink" title="1. 启动 MongoDB."></a>1. 启动 MongoDB.</h3><p>发出以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod start</span><br></pre></td></tr></table></figure><h3 id="2-验证MongoDB已成功启动"><a href="#2-验证MongoDB已成功启动" class="headerlink" title="2. 验证MongoDB已成功启动"></a>2. 验证MongoDB已成功启动</h3><p>通过在<code>/var/log/mongodb/mongod.log</code>中检查日志文件的内容以确认<code>mongod</code>进程已成功启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[initandlisten] waiting for connections on port 27017</span><br></pre></td></tr></table></figure><p><code>&lt;port&gt;</code>是 <a href="https://docs.mongodb.com/master/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener"><code>mongod</code></a> 侦听的端口。如果您修改了<code>/etc/mongod.conf</code>配置文件中的 <a href="https://docs.mongodb.com/master/reference/configuration-options/#net.port" target="_blank" rel="noopener"><code>net.port</code></a> 设置，则端口可能会有所不同。</p><p>如果您修改了 <a href="https://docs.mongodb.com/master/reference/configuration-options/#systemLog.path" target="_blank" rel="noopener"><code>systemLog.path</code></a> 配置文件选项，请在您为该设置指定的位置查找日志文件。</p><p>您可能会在 <a href="https://docs.mongodb.com/master/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener"><code>mongod</code></a> 输出中看到非严重警告。只要您看到上面显示的日志行，就可以在您对MongoDB进行初始评估期间安全地忽略这些警告。</p><h3 id="3-停止-MongoDB"><a href="#3-停止-MongoDB" class="headerlink" title="3. 停止 MongoDB."></a>3. 停止 MongoDB.</h3><p>根据需要，您可以通过发出以下命令来停止 <a href="https://docs.mongodb.com/master/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener"><code>mongod</code></a> 进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod stop</span><br></pre></td></tr></table></figure><h3 id="4-重新启动-MongoDB"><a href="#4-重新启动-MongoDB" class="headerlink" title="4. 重新启动 MongoDB."></a>4. 重新启动 MongoDB.</h3><p>发出以下命令重新启动 <a href="https://docs.mongodb.com/master/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener"><code>mongod</code></a> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod restart</span><br></pre></td></tr></table></figure><h3 id="5-开始使用-MongoDB"><a href="#5-开始使用-MongoDB" class="headerlink" title="5. 开始使用 MongoDB."></a>5. 开始使用 MongoDB.</h3><p>在与 <a href="https://docs.mongodb.com/master/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener"><code>mongod</code></a> 相同的主机上启动一个 <a href="https://docs.mongodb.com/master/reference/program/mongo/#bin.mongo" target="_blank" rel="noopener"><code>mongo</code></a>  shell。使用 <a href="https://docs.mongodb.com/master/reference/program/mongo/#cmdoption-mongo-host" target="_blank" rel="noopener"><code>--host</code></a> 命令行选项来指定 <a href="https://docs.mongodb.com/master/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener"><code>mongod</code></a> 侦听的本地主机地址和端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --host 127.0.0.1:27017</span><br></pre></td></tr></table></figure><p>之后，要停止MongoDB，请在运行<code>mongod</code>实例的终端中按下<strong>Control+C</strong>。</p><h2 id="卸载-MongoDB-社区版"><a href="#卸载-MongoDB-社区版" class="headerlink" title="卸载 MongoDB 社区版"></a>卸载 MongoDB 社区版</h2><p>要从系统中完全删除MongoDB，您必须自行删除MongoDB应用程序，配置文件以及包含数据和日志的任何目录。以下部分将指导您完成必要的步骤。</p><blockquote><p><strong>警告</strong></p><p>这个过程将完全删除MongoDB以及它的配置和所有数据库。此过程不可逆，因此请确保在继续之前备份所有配置和数据。</p></blockquote><h3 id="1-停止-MongoDB-服务"><a href="#1-停止-MongoDB-服务" class="headerlink" title="1. 停止 MongoDB 服务."></a>1. 停止 MongoDB 服务.</h3><p>使用以下的命令停止mongod进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod stop</span><br></pre></td></tr></table></figure><h3 id="2-移除软件包"><a href="#2-移除软件包" class="headerlink" title="2. 移除软件包."></a>2. 移除软件包.</h3><p>删除以前安装的任何MongoDB软件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge mongodb-org*</span><br></pre></td></tr></table></figure><h3 id="3-删除数据目录"><a href="#3-删除数据目录" class="headerlink" title="3. 删除数据目录."></a>3. 删除数据目录.</h3><p>删除MongoDB数据库和日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -r /var/log/mongodb</span><br><span class="line">sudo rm -r /var/lib/mongodb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;使用本教程在使用&lt;code&gt;.deb&lt;/code&gt;软件包的LTS Ubuntu Linux 系统上安装MongoDB社区版。&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
      <category term="CST" scheme="http://blog.lijunbo.com/categories/CST/"/>
    
    
      <category term="Software" scheme="http://blog.lijunbo.com/tags/Software/"/>
    
      <category term="Server" scheme="http://blog.lijunbo.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装MongoDB</title>
    <link href="http://blog.lijunbo.com/2018/04/02/ubuntu_mongo_db/"/>
    <id>http://blog.lijunbo.com/2018/04/02/ubuntu_mongo_db/</id>
    <published>2018-04-02T06:00:11.000Z</published>
    <updated>2019-10-08T10:39:52.111Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>相关网站</p><p><a href="https://www.mongodb.com" target="_blank" rel="noopener">MongoDB官网</a> </p><p><a href="http://www.mongodb.org.cn/" target="_blank" rel="noopener">MongoDB中文网</a>  </p><p><a href="http://www.mongoing.com/" target="_blank" rel="noopener">MongoDB社区</a> </p><p>Ubuntu搭建Node服务器，主要可以通过<strong>两种方式</strong>进行安装：</p><ol><li>二进制文件</li><li>包管理器</li></ol></blockquote><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><ol><li><p>获取下载源地址 <a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">点此获取</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.3.tgz</span><br></pre></td></tr></table></figure></li><li><p>下载安装包并解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.3.tgz</span><br><span class="line">tar -xzvf mongodb-linux-x86_64-ubuntu1604-3.4.5.tgz</span><br></pre></td></tr></table></figure><blockquote><p>如果服务器下载特别慢，那就在本地电脑下载好后,使用<a href="https://my.oschina.net/u/1756504/blog/372423" target="_blank" rel="noopener">SCP命令</a>上传到服务器上。</p><p>scp -r mongodb.tgz <a href="mailto:root@116.196.91.32" target="_blank" rel="noopener">root@116.196.91.32</a>:/root/softwares/</p><p><strong>解压过程中容易出错，解决方案见下方</strong></p></blockquote></li><li><p>配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi .bashrc // 把MongoDB的bin目录添加到环境变量中</span><br><span class="line">export PATH=$PATH:&lt;mongodb-install-directory&gt;/bin</span><br><span class="line">source .bashrc</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db version v3.2.17</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">git version: 186656d79574f7dfe0831a7e7821292ab380f667</span><br><span class="line">OpenSSL version: OpenSSL 1.0.2g  1 Mar 2016</span><br><span class="line">allocator: tcmalloc</span><br><span class="line">modules: none</span><br><span class="line">build environment:</span><br><span class="line">    distmod: ubuntu1604</span><br><span class="line">    distarch: x86_64</span><br><span class="line">    target_arch: x86_64</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><blockquote><p><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noopener">Ubuntu apt安装MongoDB【官方】文档</a> </p><p><a href="https://blog.lijunbo.com/2018/04/02/ubuntu_mongo_install/">Ubuntu apt安装MongoDB【中文】文档</a> </p></blockquote><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p><a href="https://xtu2.com/835.html" target="_blank" rel="noopener">使apt-get支持SSL源</a> </p><blockquote><p>因为在软件源中要用到HTTPS进行传输，所以，首先安装apt-transport-https，否则会出现：<br>E: The method driver /usr/lib/apt/methods/https could not be found.<br>N: Is the package apt-transport-https installed?</p><p>使用下面命令安装apt的ssl支持<br>apt-get install apt-transport-https</p><p>顺便分享几个SSL的源站<br><a href="https://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/</a><br><a href="https://mirrors.aliyun.com/" target="_blank" rel="noopener">https://mirrors.aliyun.com/</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a> 似乎限速…. 不推荐用</p></blockquote></li><li><p><a href="https://blog.csdn.net/G_66_hero/article/details/68496801" target="_blank" rel="noopener">tar解压出错：gzip: stdin: unexpected end of file的解决办法</a></p></li></ol><p>   解决方案：重新下载，再次进行解压。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://www.jianshu.com/p/1eff9b89189e" target="_blank" rel="noopener">Ubuntu 16.04 安装 MongoDB Community Edition</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;相关网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB官网&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mongo
      
    
    </summary>
    
      <category term="CST" scheme="http://blog.lijunbo.com/categories/CST/"/>
    
    
      <category term="Software" scheme="http://blog.lijunbo.com/tags/Software/"/>
    
      <category term="Server" scheme="http://blog.lijunbo.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Realm for JavaScript(2.2.0)</title>
    <link href="http://blog.lijunbo.com/2018/03/07/realm_js_doc/"/>
    <id>http://blog.lijunbo.com/2018/03/07/realm_js_doc/</id>
    <published>2018-03-07T03:11:11.000Z</published>
    <updated>2019-10-08T10:39:52.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍 "></a>介绍 <img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>Realm JavaScript 使您能够以安全，持久和快速的方式有效编写应用程序的模型层。它旨在与 <a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a> 与 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>一起工作。</p><p>这里有个简单的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">const Realm = require(&apos;realm&apos;);</span><br><span class="line"></span><br><span class="line">// 定义你的模型和它们的属性</span><br><span class="line">const CarSchema = &#123;</span><br><span class="line">  name: &apos;Car&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    make:  &apos;string&apos;,</span><br><span class="line">    model: &apos;string&apos;,</span><br><span class="line">    miles: &#123;type: &apos;int&apos;, default: 0&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name:     &apos;string&apos;,</span><br><span class="line">    birthday: &apos;date&apos;,</span><br><span class="line">    cars:     &apos;Car[]&apos;,</span><br><span class="line">    picture:  &apos;data?&apos; // 可选属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Realm.open(&#123;schema: [CarSchema, PersonSchema]&#125;)</span><br><span class="line">  .then(realm =&gt; &#123;</span><br><span class="line">    // 创建Realm对象并写入本地存储</span><br><span class="line">    realm.write(() =&gt; &#123;</span><br><span class="line">      const myCar = realm.create(&apos;Car&apos;, &#123;</span><br><span class="line">        make: &apos;Honda&apos;,</span><br><span class="line">        model: &apos;Civic&apos;,</span><br><span class="line">        miles: 1000,</span><br><span class="line">      &#125;);</span><br><span class="line">      myCar.miles += 20; // 更新属性值</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 通过Realm实例查询所有高于1000里程车</span><br><span class="line">    const cars = realm.objects(&apos;Car&apos;).filtered(&apos;miles &gt; 1000&apos;);</span><br><span class="line"></span><br><span class="line">    // 将返回一个结果对象(1辆车)</span><br><span class="line">    cars.length // =&gt; 1</span><br><span class="line"></span><br><span class="line">    // 添加另一辆车</span><br><span class="line">    realm.write(() =&gt; &#123;</span><br><span class="line">      const myCar = realm.create(&apos;Car&apos;, &#123;</span><br><span class="line">        make: &apos;Ford&apos;,</span><br><span class="line">        model: &apos;Focus&apos;,</span><br><span class="line">        miles: 2000,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 查看结果:已经实时更新了</span><br><span class="line">    cars.length // =&gt; 2</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(error =&gt; &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>请注意，如果要将Realm用于服务器端或者Node环境，则在<a href="https://realm.io/docs/realm-object-server/latest/" target="_blank" rel="noopener">Realm对象服务器文档</a>中可找到相关信息。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>按照下面的安装说明通过npm安装Realm JavaScript，或者在github上查看源代码。</p><p><strong>必要条件</strong></p><ul><li>确保您的环境设置为运行React Native应用程序。按照<a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="noopener">React Native说明</a>开始使用。</li><li>使用Realm的应用程序可以同时针对iOS和Android。</li><li>支持React Native 0.31.0及更高版本。</li></ul><ul><li><p><strong>安装</strong></p><ul><li><p>创建一个新的React Native工程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init &lt;project-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>将目录更改为新项目(<code>cd &lt;project-name&gt;</code>)，并添加<code>realm</code>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save realm</span><br></pre></td></tr></table></figure></li><li><p>接下来，将项目链接到<code>realm</code>原生模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link realm</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><em>Android的警告</em>：根据版本， <code>react-native link</code>可能会生成无效的配置，正确更新Gradle(<code>android/settings.gradle</code> and <code>android/app/build.gradle</code>) ，但无法添加Realm模块。确认<code>react-native link</code>已添加了Realm模块;如果没有，请通过以下步骤手动链接到库：</p><ol><li><p>添加以下行到 <code>android/settings.gradle</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:realm&apos;</span><br><span class="line">project(&apos;:realm&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/realm/android&apos;)</span><br></pre></td></tr></table></figure></li><li><p>将编译行添加到 <code>android/app/build.gradle</code> 中的依赖项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile project(&apos;:realm&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>MainApplication.java</code>中添加导入并链接包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import io.realm.react.RealmReactPackage; // add this import</span><br><span class="line"></span><br><span class="line">public class MainApplication extends Application implements ReactApplication &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">        return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">            new MainReactPackage(),</span><br><span class="line">            new RealmReactPackage() // 添加这行</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在已经准备好了。要查看Realm中的action，请在<code>index.ios.js</code>或<code>index.android.js</code>中添加以下作为<code>class &lt;project-name&gt;</code>的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const Realm = require(&apos;realm&apos;);</span><br><span class="line"></span><br><span class="line">class &lt;project-name&gt; extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123; realm: null &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    Realm.open(&#123;</span><br><span class="line">      schema: [&#123;name: &apos;Dog&apos;, properties: &#123;name: &apos;string&apos;&#125;&#125;]</span><br><span class="line">    &#125;).then(realm =&gt; &#123;</span><br><span class="line">      realm.write(() =&gt; &#123;</span><br><span class="line">        realm.create(&apos;Dog&apos;, &#123;name: &apos;Rex&apos;&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      this.setState(&#123; realm &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const info = this.state.realm</span><br><span class="line">      ? &apos;Number of dogs in this Realm: &apos; + this.state.realm.objects(&apos;Dog&apos;).length</span><br><span class="line">      : &apos;Loading...&apos;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          &#123;info&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，您可以在设备和模拟器中运行应用程序.</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>例子可以在<a href="https://github.com/realm/realm-js/tree/master/examples" target="_blank" rel="noopener">realm-js仓库</a>的github上找到。</p><p>请注意，在Android上，您需要安装ndk，并且必须设置android_ndk环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_NDK=/usr/local/Cellar/android-ndk/r10e</span><br></pre></td></tr></table></figure><h3 id="Realm-Studio"><a href="#Realm-Studio" class="headerlink" title="Realm Studio"></a>Realm Studio</h3><p>Realm Studio 是我们的首选开发工具，可以轻松管理Realm数据库和Realm平台。使用Realm Studio，您可以打开和编辑本地和同步Realm，并管理任何Realm对象服务器实例。它支持Mac, Windows 和 Linux 系统。</p><p><img src="https://realm.io/assets/img/docs/realm-studio.png" alt="Realm Studio"></p><p><a href="https://studio-releases.realm.io/latest/download/mac-dmg" target="_blank" rel="noopener"><img src="https://realm.io/assets/svg/products/realm-studio/apple.svg" alt="img">下载 Mac 版</a></p><p><a href="https://studio-releases.realm.io/latest/download/linux-appimage" target="_blank" rel="noopener"><img src="https://realm.io/assets/svg/products/realm-studio/linux.svg" alt="img">下载 Linux 版</a></p><p><a href="https://studio-releases.realm.io/latest/download/win-setup" target="_blank" rel="noopener"><img src="https://realm.io/assets/svg/products/realm-studio/windows.svg" alt="img">下载 Windows 版</a></p><h2 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><ul><li><strong>需要帮助你的代码？</strong> <a href="http://stackoverflow.com/questions/ask?tags=realm" target="_blank" rel="noopener">在StackOverflow上提问吧</a>. 我们积极监督并立马回答您的问题！</li><li><strong>有Bug上报?</strong> <a href="https://github.com/realm/realm-js/issues/new" target="_blank" rel="noopener">在我们Github库上提问吧</a>. 如果可能，请包括Realm版本，完整日志，Realm文件以及显示问题的项目。</li><li><strong>有功能请求吗?</strong> <a href="https://github.com/realm/realm-js/issues/new" target="_blank" rel="noopener">在我们Github库上提交请求吧吧</a>. 告诉我们功能应该做什么，以及为什么要这个功能.</li></ul><p>如果您使用崩溃记录（如Crashlytics或HockeyApp），请确保启用日志收集。Realm在抛出异常和不可恢复的情况下记录元数据信息（但不包含用户数据），并且这些消息可以帮助在出现问题时进行调试。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>Realm数据模型由初始化期间传递到Realm的schema信息定义。对象的<code>schema</code>由对象的<code>名称(name)</code>和一组属性组成，每个属性由<code>名称(name)</code>和<code>类型(type)</code>以及对象和列表属性的<code>objectType</code>组成。您还可以将每个属性指定为<code>可选optional</code>的或具有<code>默认default</code>的值,以及<code>索引indexed</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const Realm = require(&apos;realm&apos;);</span><br><span class="line"></span><br><span class="line">const CarSchema = &#123;</span><br><span class="line">  name: &apos;Car&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    make:  &apos;string&apos;,</span><br><span class="line">    model: &apos;string&apos;,</span><br><span class="line">    miles: &#123;type: &apos;int&apos;, default: 0&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name:     &apos;string&apos;,</span><br><span class="line">    birthday: &apos;date&apos;,</span><br><span class="line">    cars:     &apos;Car[]&apos;</span><br><span class="line">    picture:  &apos;data?&apos;, // 可选的属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 使用Car和Person的模型初始化Realm实例</span><br><span class="line">Realm.open(&#123;schema: [CarSchema, PersonSchema]&#125;)</span><br><span class="line">  .then(realm =&gt; &#123;</span><br><span class="line">    // ... 使用Realm实力来读取和修改数据</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote><p>在这一点上，支持通过类定义模型是有限制的。它能在React Native中运行，但不能在Node环境中。</p></blockquote><p>如果你想使用ES2015类（也许想继承现有的功能），你只需要在构造函数中定义模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  get fullName() &#123;</span><br><span class="line">    return this.firstName + &apos; &apos; + this.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.schema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    firstName: &apos;string&apos;,</span><br><span class="line">    lastName: &apos;string&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>您现在可以将该类本身传递给打开的配置的<code>schema</code>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Realm.open(&#123;schema: [Person]&#125;)</span><br><span class="line">  .then( /* ... */ );</span><br></pre></td></tr></table></figure><p>或者像往常一样访问属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  const john = realm.create(&apos;Person&apos;, &#123;</span><br><span class="line">    firstName: &apos;John&apos;,</span><br><span class="line">    lastName: &apos;Smith&apos;</span><br><span class="line">  &#125;);</span><br><span class="line">  john.lastName = &apos;Peterson&apos;;</span><br><span class="line">  console.log(john.fullName); // -&gt; &apos;John Peterson&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Supported-types"><a href="#Supported-types" class="headerlink" title="Supported types"></a>Supported types</h3><p>Realm支持以下基本类型: <code>bool</code>, <code>int</code>, <code>float</code>, <code>double</code>, <code>string</code>, <code>data</code>, 和 <code>date</code>.</p><ul><li><code>bool</code> 属性映射到 JavaScript <code>Boolean</code> 对象</li><li><code>int</code>, <code>float</code>, and <code>double</code> 属性映射到 JavaScript <code>Number</code> 对象. 内部的<code>int</code>和<code>double</code>被存储为64位，而<code>float</code>以32位存储。</li><li><code>string</code> 属性映射到 <code>String</code></li><li><code>data</code> 属性映射到 <code>ArrayBuffer</code></li><li><code>date</code> 属性映射到 <code>Date</code></li></ul><p>将基本属性指定为简写时，您可以仅指定类型，而不必指定具有单个条目的字典：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const CarSchema = &#123;</span><br><span class="line">  name: &apos;Car&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    // 以下属性类型是等效的 </span><br><span class="line">    make:   &#123;type: &apos;string&apos;&#125;,</span><br><span class="line">    model: &apos;string&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><p>默认情况下，基本类型是非可选的，不支持存储<code>null</code>或<code>undefined</code>。属性可以通过在属性定义中指定<code>optional</code>指示符或使用简写语法，通过附加一个<code>?</code>到类型名称后面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    realName:    &apos;string&apos;, // 要求属性</span><br><span class="line">    displayName: &apos;string?&apos;, // 可选属性</span><br><span class="line">    birthday:    &#123;type: &apos;date&apos;, optional: true&#125;, // 可选属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let realm = new Realm(&#123;schema: [PersonSchema, CarSchema]&#125;);</span><br><span class="line"></span><br><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  // 可选属性可以在创建时设置为null或未定义</span><br><span class="line">  let charlie = realm.create(&apos;Person&apos;, &#123;</span><br><span class="line">    realName: &apos;Charlie&apos;,</span><br><span class="line">    displayName: null, // 也可以完全省略</span><br><span class="line">    birthday: new Date(1995, 11, 25),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 可选属性可以设置为`null`, `undefined`,</span><br><span class="line">  // 或新的非空值</span><br><span class="line">  charlie.birthday = undefined;</span><br><span class="line">  charlie.displayName = &apos;Charles&apos;;</span><br><span class="line"></span><br><span class="line">  // 将非可选属性设置为null会抛出`TypeError`</span><br><span class="line">  // charlie.realName = null;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h4><p>除了存储单个值之外，还可以将属性声明为任何支持的基本类型的列表。这是通过将<code>[]</code>附加到类型名称来完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name: &apos;string&apos;,</span><br><span class="line">    testScores: &apos;double?[]&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let realm = new Realm(&#123;schema: [PersonSchema, CarSchema]&#125;);</span><br><span class="line"></span><br><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  let charlie = realm.create(&apos;Person&apos;, &#123;</span><br><span class="line">    name: &apos;Charlie&apos;,</span><br><span class="line">    testScores: [100.0]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 查理在第二次考试中缺席了并且被允许跳过它</span><br><span class="line">  charlie.testScores.push(null);</span><br><span class="line"></span><br><span class="line">  // 然后他在第三次测试中表现不佳</span><br><span class="line">  charlie.testScores.push(70.0);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>访问列表属性时会返回一个<code>列表List</code>对象。<code>列表List</code>的方法非常类似于常规的JavaScript数组。最大的区别是对<code>列表List</code>所做的任何更改都会自动保存到底层Realm，因此只能在<a href="https://realm.io/docs/javascript/latest/#writes" target="_blank" rel="noopener">写入事务</a>中进行修改。此外，<code>列表List</code>属于它们从中获取的底层对象 - 您只能通过访问拥有对象中的属性来获取列表实例，并且不能手动创建它们。</p><p>虽然list属性中的值可以是可选的，但list属性本身不可以。使用longhand语法 (<code>values: {type: &#39;int[]&#39;, optional: true}</code>)指定list属性为可选项，将使列表中的值成为可选项。</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><h4 id="一对一的关系"><a href="#一对一的关系" class="headerlink" title="一对一的关系"></a>一对一的关系</h4><p>对于一对一的关系，您可以将引用的对象<code>schema</code>的<code>name</code>属性指定为属性的<code>类型(type)</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    // 所有以下属性定义是等效的</span><br><span class="line">    car: &#123;type: &apos;Car&apos;&#125;,</span><br><span class="line">    van: &apos;Car&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用对象属性时，需要确保所有引用的类型都存在于用于打开<code>Realm</code>的<code>schema</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// CarSchema是必需的，因为PersonSchema包含&apos;car&apos;类型的属性，</span><br><span class="line">Realm.open(&#123;schema: [CarSchema, PersonSchema]&#125;).then(/* ... */);</span><br></pre></td></tr></table></figure><p>访问对象属性时，可以使用普通属性语法访问嵌套属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  const nameString = person.car.name;</span><br><span class="line">  person.car.miles = 1100;</span><br><span class="line">  </span><br><span class="line">  // 通过将属性设置为具有所有必填字段的对象来创建Car实例</span><br><span class="line">  person.van = &#123;make: &apos;Ford&apos;, model: &apos;Transit&apos;&#125;;</span><br><span class="line"></span><br><span class="line">  // 将两个属性设置为同一个汽车实例</span><br><span class="line">  person.car = person.van;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Realm中的对象属性始终是可选的，不必像这样明确指定，并且不能使其成为必需。</p><h4 id="一对多的关系"><a href="#一对多的关系" class="headerlink" title="一对多的关系"></a>一对多的关系</h4><p>就像基本属性一样，你也可以有一个对象列表来形成一对多的关系。这可以通过将<code>[]</code>添加到目标对象<code>schema</code>的名称或通过将属性类型设置为<code>列表list</code>并指定<code>objectType</code>来完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    // 以下属性定义是等效的</span><br><span class="line">    cars: &#123;type: &apos;list&apos;, objectType: &apos;Car&apos;&#125;,</span><br><span class="line">    vans: &apos;Car[]&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let carList = person.cars;</span><br><span class="line"></span><br><span class="line">// 将新车添加到列表`List`中</span><br><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  carList.push(&#123;make: &apos;Honda&apos;, model: &apos;Accord&apos;, miles: 100&#125;);</span><br><span class="line">  carList.push(&#123;make: &apos;Toyota&apos;, model: &apos;Prius&apos;, miles: 200&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let secondCar = carList[1].model;  // access using an array index</span><br></pre></td></tr></table></figure><p>与其他列表和一对一关系不同，一对多关系不能作为可选项。</p><h4 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h4><p>链接是单向的。所以如果一对多的属性<code>Person.dogs</code>链接到一个<code>Dog</code>实例和一个属性<code>Dog.owner</code>链接到<code>Person</code>，这些链接是彼此独立的。将<code>Dog</code>添加到<code>Person</code>实例的 <code>dogs</code> 属性不会自动将该狗的<code>owner</code> 属性设置为此<code>Person</code>。因为手动同步<code>成对</code>关系很容易出错，并且比较复杂和容易生成重复信息，所以Realm提供链接对象属性来表示这些反向关系。</p><p>使用链接对象属性，可以从特定属性获取链接到给定对象的所有对象。例如，<code>Dog</code>对象可以具有一个名为<code>owner</code>的属性，该属性包含其<code>dogs</code>属性中具有这个确切<code>Dog</code>对象的所有<code>Person</code>对象。通过<code>owners</code>属性的<code>linkingObjects</code>类型，指定它与Person对象的关系。</p><p>这样做可以通过<code>owners</code>属性指定它与Person对象的关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    dogs: &apos;Dog[]&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const DogSchema = &#123;</span><br><span class="line">  name:&apos;Dog&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    // ``对象属性没有简写语法</span><br><span class="line">    owners: &#123;type: &apos;linkingObjects&apos;, objectType: &apos;Person&apos;, property: &apos;dogs&apos;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个<code>linksObjects</code>属性可以指向一个<code>List</code>属性（多对多关系）或一个<code>Object</code>属性（一对一关系）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const ShipSchema = &#123;</span><br><span class="line">  name: &apos;Ship&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    captain: &apos;Captain&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const CaptainSchema = &#123;</span><br><span class="line">  name: &apos;Captain&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    ships: &#123;type: &apos;linkingObjects&apos;, objectType: &apos;Ship&apos;, property: &apos;captain&apos;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>linksObjects</code>属性时，返回一个<code>Results</code>对象，因此完全支持进一步的<a href="https://realm.io/docs/javascript/latest/#queries" target="_blank" rel="noopener">查询和排序</a>。<code>linksObject</code>属性属于它们从中获取的对象，不能直接设置或操作。当事务提交时，它们将自动更新。</p><p><em>访问不带schema的linkingObjects</em>：如果您打开了一个Realm文件而不指定schema，例如在Realm Functions回调中，您可以通过在<code>Object</code>实例上调用 <code>linkingObjects(objectType, property)</code> 来获取<code>linksObjects</code>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let captain = realm.objectForPrimaryKey(&apos;Captain&apos;, 1);</span><br><span class="line">let ships = captain.linkingObjects(&apos;Ship&apos;, &apos;captain&apos;);</span><br></pre></td></tr></table></figure><p>链接对象属性不能作为可选项。</p><h3 id="默认属性值"><a href="#默认属性值" class="headerlink" title="默认属性值"></a>默认属性值</h3><p>可以通过在属性定义中设置默认指示符来指定默认属性值。要使用默认值，请在创建对象期间保留未指定的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const CarSchema = &#123;</span><br><span class="line">  name: &apos;Car&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    make:  &#123;type: &apos;string&apos;&#125;,</span><br><span class="line">    model: &#123;type: &apos;string&apos;&#125;,</span><br><span class="line">    drive: &#123;type: &apos;string&apos;, default: &apos;fwd&apos;&#125;,</span><br><span class="line">    miles: &#123;type: &apos;int&apos;,    default: 0&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  // 由于`miles`被遗漏，它默认为“0”，而`drive`被指定，它会覆盖默认值</span><br><span class="line">  realm.create(&apos;Car&apos;, &#123;make: &apos;Honda&apos;, model: &apos;Accord&apos;, drive: &apos;awd&apos;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="索引属性"><a href="#索引属性" class="headerlink" title="索引属性"></a>索引属性</h3><p>您可以将索引的指示符添加到属性定义，以使该属性进行索引。 目前支持 <code>int</code>, <code>string</code>,  <code>bool</code> 和<code>date</code>属性类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var BookSchema = &#123;</span><br><span class="line">  name: &apos;Book&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name: &#123; type: &apos;string&apos;, indexed: true &#125;,</span><br><span class="line">    price: &apos;float&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>索引属性将极大地加快查询的属性进行比较，但是以较慢的插入为代价。</p><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>您可以在对象模型中为<code>string</code>和<code>int</code>属性指定<code>primaryKey</code>属性。声明一个主键可以对对象进行高效查找和更新，并强制执行每个值的唯一性。一旦有一个主键的对象被添加到Realm，主键就不能被改变了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const BookSchema = &#123;</span><br><span class="line">  name: &apos;Book&apos;,</span><br><span class="line">  primaryKey: &apos;id&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    id:    &apos;int&apos;,    // 主键</span><br><span class="line">    title: &apos;string&apos;,</span><br><span class="line">    price: &apos;float&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主键属性自动编入索引.</p><h2 id="写"><a href="#写" class="headerlink" title="写"></a>写<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>创建，更新和删除Realm中的对象的操作必须在<code>write()</code>事务块中进行。请注意，写入事务具有不可忽略的开销;您应该尽量减少代码中写入块的数量。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用<code>create</code>方法创建对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  realm.write(() =&gt; &#123;</span><br><span class="line">    realm.create(&apos;Car&apos;, &#123;make: &apos;Honda&apos;, model: &apos;Accord&apos;, drive: &apos;awd&apos;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log(&quot;Error on creation&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意， <code>write()</code>方法中抛出的任何异常都将取消事务。所有示例中都不会显示<code>try/catch</code> 块，但这是很好的做法。</p><h3 id="嵌套对象"><a href="#嵌套对象" class="headerlink" title="嵌套对象"></a>嵌套对象</h3><p>如果对象具有对象属性，则可以通过为每个子属性指定JSON值来递归地创建这些属性的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  realm.create(&apos;Person&apos;, &#123;</span><br><span class="line">    name: &apos;Joe&apos;,</span><br><span class="line">    // 嵌套对象是递归创建的</span><br><span class="line">    car: &#123;make: &apos;Honda&apos;, model: &apos;Accord&apos;, drive: &apos;awd&apos;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h3><h4 id="键入的更新"><a href="#键入的更新" class="headerlink" title="键入的更新"></a>键入的更新</h4><p>您可以通过在写事务中设置其属性来更新任何对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  car.miles = 1100;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用主键创建和更新对象"><a href="#使用主键创建和更新对象" class="headerlink" title="使用主键创建和更新对象"></a>使用主键创建和更新对象</h4><p>如果您的模型类包含主键，则可以根据主键值智能地更新或添加对象。这是通过将<code>true</code>作为第三个参数传递给<code>create</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  // 创建一个book对象</span><br><span class="line">  realm.create(&apos;Book&apos;, &#123;id: 1, title: &apos;Recipes&apos;, price: 35&#125;);</span><br><span class="line"></span><br><span class="line">  // 通过ID,用新的价格更新book对象</span><br><span class="line">  realm.create(&apos;Book&apos;, &#123;id: 1, price: 55&#125;, true);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的例子中，由于一个对象已经存在，<code>id</code>值为<code>1</code>，并且我们已经为第三个参数传递了<code>true</code>，所以<code>price</code>属性被更新，而不是尝试创建一个新的对象。由于<code>name</code>属性被省略，对象保留此属性的原始值。请注意，当使用主键属性创建或更新对象时，必须指定主键。</p><h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><p>可以通过在写事务中调用<code>delete</code>方法来删除对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  // Create a book object</span><br><span class="line">  let book = realm.create(&apos;Book&apos;, &#123;id: 1, title: &apos;Recipes&apos;, price: 35&#125;);</span><br><span class="line"></span><br><span class="line">  // Delete the book</span><br><span class="line">  realm.delete(book);</span><br><span class="line"></span><br><span class="line">  // Delete multiple books by passing in a `Results`, `List`, or JavaScript `Array`</span><br><span class="line">  let allBooks = realm.objects(&apos;Book&apos;);</span><br><span class="line">  realm.delete(allBooks); // Deletes all books</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>查询允许您从Realm中获取单个类型的对象，并可选择过滤和排序这些结果。所有查询（包括查询和属性访问）在Realm中都是懒加载的。仅在访问对象和属性时才读取数据。这样，您可以以高效的方式表示大量数据。</p><p>执行查询时，您将返回一个<code>Results</code>对象。<code>Results</code>只是您的数据视图，不可变。</p><p>从Realm中检索对象的最基本方法是使用Realm中的<code>objects</code>方法来获取给定类型的所有对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let dogs = realm.objects(&apos;Dog&apos;); // retrieves all Dogs from the Realm</span><br></pre></td></tr></table></figure><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>您可以通过使用查询字符串调用过滤的方法来获取已过滤的结果。</p><p>例如，以下将改变我们早期的例子，以检索所有具有颜色tan的狗，以’B’开头的名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let dogs = realm.objects(&apos;Dog&apos;);</span><br><span class="line">let tanDogs = dogs.filtered(&apos;color = &quot;tan&quot; AND name BEGINSWITH &quot;B&quot;&apos;);</span><br></pre></td></tr></table></figure><p>目前，查询语言只支持NSPredicate语法的一部分,让我们简要总结一下支持的功能和语法：</p><p>Realm支持的查询语言受到了苹果公司的 <a href="https://developer.apple.com/documentation/foundation/nspredicate" target="_blank" rel="noopener">Apple’s NSPredicate</a>启发。让我们简要总结一下支持的功能和语法：</p><ul><li>比较操作数可以是属性名称或常量。至少有一个操作数必须是属性名称。特殊常量为<code>false</code>, <code>true</code>, 和 <code>null</code>.</li><li>时间戳可以以“YYYY-MM-DD@HH:MM:SS:NANOSECONDS” 格式指定，其中纳秒可以省略。</li><li>比较运算符 <code>=</code>/<code>==</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>!=</code>/<code>&lt;&gt;</code>,以及 <code>BETWEEN</code> 的比较运算符支持 <code>int</code>, <code>float</code>, <code>double</code>, 和 <code>Date</code> 属性类型。 e.g. <code>age = 45</code>.</li><li>boolean (<code>bool</code>)属性支持比较运算符<code>=</code>/<code>==</code> and <code>!=</code>/<code>&lt;&gt;</code> </li><li>对于字符串和数据（<code>ArrayBuffer</code>）属性，支持 <code>=</code> (and <code>==</code>), <code>!=</code> (and <code>&lt;&gt;</code>), <code>BEGINSWITH</code>, <code>CONTAINS</code>, and <code>ENDSWITH</code> 运算符。e.g. <code>name CONTAINS &#39;Ja&#39;</code>.</li><li>通配符比较对于具有相似运算符的字符串是可能的， e.g. <code>name LIKE &#39;*an?&#39;</code> 匹配 “Jane”, “Dan”, “Shane”, 等等.</li><li>使用<code>[c]</code>的字符串不区分大小写的比较，e.g. , <code>CONTAINS[c] &#39;Ja&#39;</code>. 注意只有字符“A-Z” 和 “a-z” 会被忽略。</li><li>Realm支持以下复合运算符：<code>AND</code>/<code>&amp;&amp;</code>, <code>OR</code>/ <code>||</code>, 和 <code>NOT</code>/<code>!</code>, e.g. <code>name BEGINSWITH &#39;J&#39; AND age &gt;= 32</code>.</li><li>在列表属性上支持聚合表达式 <code>@count</code>/<code>@size</code>, <code>@min</code>, <code>@max</code>, <code>@sum</code> 和 <code>@avg</code> 。eg:<code>employees.@count &gt; 5</code>查找多于5个元素的员工列表。</li><li>字符串和二进制属性的聚合表达式 <code>@count</code>/<code>@size</code> ，e.g. <code>name.@size = 5</code> 查找所有名称均为5个字母的名称。</li><li>关键路径可以遵循列表属性关系，e.g. <code>child.age &gt;= 13</code> and <a href="mailto:`cars.@avg.milage" target="_blank" rel="noopener">`cars.@avg.milage</a> &gt; 1000`.</li><li><code>$</code>运算符可以用来替换参数, e.g. <code>child.age &gt;= $0</code> 请参阅下面的示例）。</li></ul><p>An non-trivial example on how to query a Realm is:</p><p>一个关于如何查询Realm的特殊例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">const Realm = require(&apos;realm&apos;);</span><br><span class="line"></span><br><span class="line">const CarSchema = &#123;</span><br><span class="line">  name: &apos;Car&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    make:  &apos;string&apos;,</span><br><span class="line">    model: &apos;string&apos;,</span><br><span class="line">    miles: &#123;type: &apos;int&apos;, default: 0&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name:     &apos;string&apos;,</span><br><span class="line">    cars:     &#123;type: &apos;list&apos;, objectType: &apos;Car&apos;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Initialize a Realm with Car and Person models</span><br><span class="line">Realm.open(&#123;schema: [CarSchema, PersonSchema]&#125;)</span><br><span class="line">    .then(realm =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        // Add persons and their cars</span><br><span class="line">        realm.write(() =&gt; &#123;</span><br><span class="line">            let john = realm.create(&apos;Person&apos;, &#123;name: &apos;John&apos;, cars: []&#125;);</span><br><span class="line">            john.cars.push(&#123;make: &apos;Honda&apos;,  model: &apos;Accord&apos;, miles: 1500&#125;);</span><br><span class="line">            john.cars.push(&#123;make: &apos;Toyota&apos;, model: &apos;Prius&apos;,  miles: 2780&#125;);</span><br><span class="line"></span><br><span class="line">            let joan = realm.create(&apos;Person&apos;, &#123;name: &apos;Joan&apos;, cars: []&#125;);</span><br><span class="line">            joan.cars.push(&#123;make: &apos;Skoda&apos;, model: &apos;Octavia&apos;, miles: 1120&#125;);</span><br><span class="line">            joan.cars.push(&#123;make: &apos;Ford&apos;,  model: &apos;Fiesta&apos;,  miles: 95&#125;);</span><br><span class="line">            joan.cars.push(&#123;make: &apos;VW&apos;,    model: &apos;Golf&apos;,    miles: 1270&#125;);</span><br><span class="line"></span><br><span class="line">            let jill = realm.create(&apos;Person&apos;, &#123;name: &apos;Jill&apos;, cars: []&#125;);</span><br><span class="line"></span><br><span class="line">            let jack = realm.create(&apos;Person&apos;, &#123;name: &apos;Jack&apos;, cars: []&#125;);</span><br><span class="line">            jack.cars.push(&#123;make: &apos;Porche&apos;, model: &apos;911&apos;,    miles: 965&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // Find car owners</span><br><span class="line">        let carOwners = realm.objects(&apos;Person&apos;).filtered(&apos;cars.@size &gt; 0&apos;);</span><br><span class="line">        console.log(&apos;Car owners&apos;)</span><br><span class="line">        for (let p of carOwners) &#123;</span><br><span class="line">            console.log(`  $&#123;p.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Find who has been driver longer than average</span><br><span class="line">        let average = realm.objects(&apos;Car&apos;).avg(&apos;miles&apos;);</span><br><span class="line">        let longerThanAverage = realm.objects(&apos;Person&apos;).filtered(&apos;cars.@sum.miles &gt; $0&apos;, average);</span><br><span class="line">        console.log(`Longer than average ($&#123;average&#125;)`)</span><br><span class="line">        for (let p of longerThanAverage) &#123;</span><br><span class="line">            console.log(`  $&#123;p.name&#125;: $&#123;p.cars.sum(&apos;miles&apos;)&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        realm.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The output of the code snippet is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Car owners</span><br><span class="line">  John</span><br><span class="line">  Joan</span><br><span class="line">  Jack</span><br><span class="line">Longer than average (1288.3333333333333)</span><br><span class="line">  John: 4280</span><br><span class="line">  Joan: 2485</span><br></pre></td></tr></table></figure><h3 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h3><p><code>Results</code>允许您根据单个或多个属性指定排序标准和顺序。</p><p>例如，以下是上述示例中查询结果返回的汽车结果集,按照数英里进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let hondas = realm.objects(&apos;Car&apos;).filtered(&apos;make = &quot;Honda&quot;&apos;);</span><br><span class="line"></span><br><span class="line">// 按`miles`排序hondas结果集(默认升序)</span><br><span class="line">let sortedHondas = hondas.sorted(&apos;miles&apos;);</span><br><span class="line"></span><br><span class="line">// 按`miles`的降序hondas结果集</span><br><span class="line">sortedHondas = hondas.sorted(&apos;miles&apos;, true);</span><br><span class="line"></span><br><span class="line">// 按`price`降序排序，然后按`miles`升序排序</span><br><span class="line">sortedHondas = hondas.sorted([[&apos;price&apos;, true], [&apos;miles&apos;, false]]);</span><br></pre></td></tr></table></figure><p><code>Results</code>也可以按照您正在排序的对象链接到的对象的值进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let people = realm.objects(&apos;Person&apos;);</span><br><span class="line"></span><br><span class="line">// 按他们的汽车的里程(`miles`)排序</span><br><span class="line">let sortedPeople = people.sorted(&apos;car.miles&apos;);</span><br></pre></td></tr></table></figure><p>基本类型<code>List</code>可以通过调用<code>sorted()</code>而不指定属性来按其值排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let person = realm.objects(&apos;Person&apos;)[0];</span><br><span class="line">let sortedTestScores = person.testScores.sorted();</span><br></pre></td></tr></table></figure><blockquote><p>请注意，<code>Results</code>的顺序只有在查询排序后才能保证一致。出于性能原因，不保证插入顺序。</p></blockquote><h3 id="自动更新结果集"><a href="#自动更新结果集" class="headerlink" title="自动更新结果集"></a>自动更新结果集</h3><p><code>Results</code>实例是实时的，自动更新视图到底层数据中，这意味着结果集永远不需要重新获取。修改影响查询的对象将立即反映在结果集中。这是一个例外，当使用 <code>for...in</code> 或 <code>for...of</code>,时，即使其中一些被删除或修改为被排除，它将始终遍历迭代开始时与查询匹配的对象迭代期间的过滤器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let hondas = realm.objects(&apos;Car&apos;).filtered(&apos;make = &quot;Honda&quot;&apos;);</span><br><span class="line">// hondas.length == 0</span><br><span class="line"></span><br><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  realm.create(&apos;Car&apos;, &#123;make: &apos;Honda&apos;, model: &apos;RSX&apos;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// hondas.length == 1</span><br></pre></td></tr></table></figure><p>这适用于所有<code>Results</code>实例，包括由<code>objects</code>,<code>filtered</code>,<code>sorted</code>方法返回的结果集。</p><p><code>Results</code>的这个属性不仅使Realm快速和高效，它允许您的代码更简单，更有灵活性。例如，如果您的视图依赖于查询的结果，则可以将结果存储在属性中并访问它，而无需在每次访问之前刷新其数据。</p><p>您可以订阅<a href="#notifications">通知</a>，以了解何时更新Realm数据，指出何时应该刷新应用的UI，而无需重新获取Results。</p><h3 id="限制结果集"><a href="#限制结果集" class="headerlink" title="限制结果集"></a>限制结果集</h3><p>大多数其他数据库技术提供了对查询结果进行“分页”的能力（例如SQLite中的“LIMIT”关键字）。这通常是为了避免从磁盘读取太多或者一次将太多结果拖到内存中而完成的。</p><p>由于Realm中的查询是懒惰的，所以执行这种分页行为根本不是必需的，因为只有在明确访问该域后，域才会从查询结果中加载对象。</p><p>如果由于与UI相关或其他实现原因，您需要查询中的特定对象子集，那么只需要使用<code>Results</code>对象，并只读出所需的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let cars = realm.objects(&apos;Car&apos;);</span><br><span class="line"></span><br><span class="line">// get first 5 Car objects</span><br><span class="line">let firstCars = cars.slice(0, 5);</span><br></pre></td></tr></table></figure><h2 id="Realms"><a href="#Realms" class="headerlink" title="Realms"></a>Realms<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><h3 id="打开Realm实例"><a href="#打开Realm实例" class="headerlink" title="打开Realm实例"></a>打开Realm实例</h3><p>打开Realm只是通过实例化一个新的Realm对象来执行。将<code>配置对象</code>传递给构造函数。我们已经看到这个已经在示例中使用了包含<code>schema</code>键的配置对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获得支持我们对象的默认的Realm实例</span><br><span class="line">Realm.open(&#123;schema: [Car, Person]&#125;)</span><br><span class="line">  .then(realm =&gt; &#123;</span><br><span class="line">    // ...在这里使用Realm实例</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(error =&gt; &#123;</span><br><span class="line">    // 如果发生任何错误,将在这里进行捕获处理</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>有关配置对象的完整详细信息，请参阅API参考以进行<a href="https://realm.io/docs/javascript/latest/api/Realm.html#~Configuration" target="_blank" rel="noopener">配置</a>。对象的一些更常见的键，除了<code>schema</code>，包括：</p><ul><li><code>path</code>: 指定<a href="https://realm.io/docs/javascript/latest/#other-realms" target="_blank" rel="noopener">另一个Realm</a>的路径</li><li><code>migration</code>: <a href="https://realm.io/docs/javascript/latest/#migrations" target="_blank" rel="noopener">迁移功能</a></li><li><code>sync</code>: <a href="https://realm.io/docs/javascript/latest/#sync" target="_blank" rel="noopener">同步对象</a>, ，打开与Realm对象服务器同步的Realm</li><li><code>inMemory</code>:Realm将在内存中打开，并且对象不会持久化;一旦最后一个Realm实例关闭，所有对象都会销毁.</li><li><code>deleteRealmIfMigrationNeeded</code>:如果需要迁移，则删除领域;这在开发中很有用，因为数据模型可能经常变化</li></ul><h3 id="默认Realm实例"><a href="#默认Realm实例" class="headerlink" title="默认Realm实例"></a>默认Realm实例</h3><p>在以前的所有例子中可能已经注意到路径参数已被省略。在这种情况下，使用默认的Realm路径。您可以使用<code>Realm.defaultPath</code>全局属性访问和更改默认的Realm路径。</p><h3 id="其他Realm实例"><a href="#其他Realm实例" class="headerlink" title="其他Realm实例"></a>其他Realm实例</h3><p>有多个Realm在多个位置持久化是有用的。例如，除了您的主Realm外，您还可能希望将一些数据与您的应用程序捆绑在Realm文件中。您可以通过在初始化Realm时指定<code>路径path</code>参数来执行此操作。所有路径都相对于您的应用程序的可写入文档目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Open a realm at another path</span><br><span class="line">Realm.open(&#123;</span><br><span class="line">  path: &apos;anotherRealm.realm&apos;,</span><br><span class="line">  schema: [CarSchema]</span><br><span class="line">&#125;).then(/* ... */);</span><br></pre></td></tr></table></figure><h3 id="Schema版本"><a href="#Schema版本" class="headerlink" title="Schema版本"></a>Schema版本</h3><p>打开Realm时可用的另一个选项是<code>schemaVersion</code>属性。当省略时，<code>schemaVersion</code>属性默认为0.在使用包含与之前规范不同的对象的Schema初始化现有Realm时，需要指定<code>schemaVersion</code>。如果Schema被更新并且<code>schemaVersion</code>不是之前的结构，将抛出异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name: &apos;string&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// schemaVersion defaults to 0</span><br><span class="line">Realm.open(&#123;schema: [PersonSchema]&#125;);</span><br></pre></td></tr></table></figure><p>如果你后来做这样的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const UpdatedPersonSchema = &#123;</span><br><span class="line">  // 因为schema名称相同, 所以以前的“Person”对象在Realm将会更新</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name: &apos;string&apos;,</span><br><span class="line">    dog:  &apos;Dog&apos;     // 新属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 这将抛出异常，因为schema已经改变和`schemaVersion`还没有指定</span><br><span class="line">Realm.open(&#123;schema: [UpdatedPersonSchema]&#125;);</span><br><span class="line"></span><br><span class="line">// 这将成功并将Realm更新到新的schema</span><br><span class="line">Realm.open(&#123;schema: [UpdatedPersonSchema], schemaVersion: 1&#125;);</span><br></pre></td></tr></table></figure><p>如果您想要检索当前的<code>Realm</code> 的 <code>schema</code> 的版本，可以使用<code>Realm.schemaVersion</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const currentVersion = Realm.schemaVersion(Realm.defaultPath);</span><br></pre></td></tr></table></figure><h3 id="异步打开Realm"><a href="#异步打开Realm" class="headerlink" title="异步打开Realm"></a>异步打开Realm</h3><p>您可以通过简单地调用构造函数并将<code>配置对象</code>传递给它来创建Realm实例。通常不推荐这样做，因为它会阻止并且可能是一项耗时的操作，尤其是在要<a href="#迁移">迁移</a>的情况下运行,或者Realm已<a href="#同步">同步</a>,并且您不希望在数据完全下载之前修改数据。</p><p>如果你仍然想这样做，模式很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const realm = new Realm(&#123;schema: [PersonSchema]&#125;);</span><br><span class="line"></span><br><span class="line">// You can now access the realm instance.</span><br><span class="line">realm.write(/* ... */);</span><br></pre></td></tr></table></figure><blockquote><p>如果Realm具有只读<a href="https://realm.io/docs/javascript/latest/#access-control" target="_blank" rel="noopener">权限</a>，那么您必须使用异步API来打开它。用上述模式打开只读领域将导致错误。</p></blockquote><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>在使用数据库时，您的数据模型很可能随时间而改变。例如，假设我们有以下<code>Person</code>模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    firstName: &apos;string&apos;,</span><br><span class="line">    lastName: &apos;string&apos;,</span><br><span class="line">    age: &apos;int&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要更新数据模型，用来添加一个<code>name</code>属性，而不是单独的名字和姓氏。为此，我们只需将schema更改为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const PersonSchema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name: &apos;string&apos;,</span><br><span class="line">    age: &apos;int&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这一点上，如果您使用以前的<code>model</code>版本保存了任何数据，新的代码和Realm已存储在磁盘上的旧数据将不匹配。发生这种情况时，当您尝试使用新的<code>schema</code>打开现有的Realm时，将抛出异常，除非运行迁移。</p><h3 id="进行迁移"><a href="#进行迁移" class="headerlink" title="进行迁移"></a>进行迁移</h3><p>您可以通过更新<a href="https://realm.io/docs/javascript/latest/#schema-version" target="_blank" rel="noopener">schemaVersion</a>并定义可选的迁移函数来定义迁移和关联的schema版本。您的迁移函数提供将数据模型从以前的schema转换为新的schema所需的任何逻辑。当打开Realm时，只有在需要迁移时，才会将迁移函数应用于将Realm更新到给定的schema版本。</p><p>如果没有提供迁移函数，则当更新到新的<code>schemaVersion</code>时，任何新的属性将自动添加并且旧的属性从数据库中删除。如果您需要在升级版本时更新旧的或填充的新属性，那么可以在迁移函数中执行此操作。例如，假设我们要迁移先前声明的<code>Person</code>模型。您可以使用旧的<code>firstName</code>和<code>lastName</code>属性填充新模式的<code>name</code>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Realm.open(&#123;</span><br><span class="line">  schema: [PersonSchema],</span><br><span class="line">  schemaVersion: 1,</span><br><span class="line">  migration: (oldRealm, newRealm) =&gt; &#123;</span><br><span class="line">    // only apply this change if upgrading to schemaVersion 1</span><br><span class="line">    if (oldRealm.schemaVersion &lt; 1) &#123;</span><br><span class="line">      const oldObjects = oldRealm.objects(&apos;Person&apos;);</span><br><span class="line">      const newObjects = newRealm.objects(&apos;Person&apos;);</span><br><span class="line"></span><br><span class="line">      // loop through all objects and set the name property in the new schema</span><br><span class="line">      for (let i = 0; i &lt; oldObjects.length; i++) &#123;</span><br><span class="line">        newObjects[i].name = oldObjects[i].firstName + &apos; &apos; + oldObjects[i].lastName;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(realm =&gt; &#123;</span><br><span class="line">  const fullName = realm.objects(&apos;Person&apos;)[0].name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>迁移成功完成后，您的应用程序可以像往常一样访问Realm及其所有对象。</p><h3 id="线性迁移"><a href="#线性迁移" class="headerlink" title="线性迁移"></a>线性迁移</h3><p>使用上述迁移模式，您可能会在多个版本上迁移时遇到问题。如果用户跳过应用程序更新，并且在跳过的版本中属性已被更改多次，则可能会发生这种情况。在这种情况下，您可能需要编辑旧的迁移代码才能将数据从旧schema更新到最新schema。</p><p>可以通过顺序运行多个迁移来避免此问题，确保将数据库升级到每个先前版本，并运行关联的迁移代码。当遵循这种模式时，永远不需要修改旧的迁移代码，尽管您需要保留所有旧的schema和迁移模块以备将来使用。一个这样的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const schemas = [</span><br><span class="line">  &#123; schema: schema1, schemaVersion: 1, migration: migrationFunction1 &#125;,</span><br><span class="line">  &#123; schema: schema2, schemaVersion: 2, migration: migrationFunction2 &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 要更新的第一个schema是当前schema版本。</span><br><span class="line">// 因为第一个schema是在我们的数组里</span><br><span class="line">let nextSchemaIndex = Realm.schemaVersion(Realm.defaultPath);</span><br><span class="line">while (nextSchemaIndex &lt; schemas.length) &#123;</span><br><span class="line">  const migratedRealm = new Realm(schemas[nextSchemaIndex++]);</span><br><span class="line">  migratedRealm.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用最新的schema打开Realm</span><br><span class="line">Realm.open(schemas[schemas.length-1]);</span><br></pre></td></tr></table></figure><h2 id="Notifications"><a href="#Notifications" class="headerlink" title="Notifications"></a>Notifications<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>Realm的 <code>Results</code>和 <code>List</code> 对象提供了<code>addListener</code>方法来注册通知回调。每当更新对象时，将调用更改通知回调。</p><p>有两种通知，“Realm通知”（提交写入事务时通知的简单回调）和“Collection通知”（更复杂的回调，它们在插入，删除和更新时接收更改元数据）。</p><p>此外，专业版和企业版提供事件处理通知。阅读“Realm移动平台”了解更多信息。</p><p>如果Realm升级到了最新版本, 在某些情况下，可以在事务开始时调用监听器 ，或者观察到的Realm实体以触发通知的方式被修改或删除。在这些情况下，监听器在当前写入事务的上下文中运行，因此尝试在通知处理程序中开始新的写入事务将引发异常。您可以使用<code>Realm.isInTransaction</code>属性来确定您的代码是否在写入事务中执行。</p><h3 id="Realm通知"><a href="#Realm通知" class="headerlink" title="Realm通知"></a>Realm通知</h3><p>每次提交写入事务时，Realm实例都会向其他实例发送通知。注册通知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function updateUI() &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 注册 Realm 通知</span><br><span class="line">realm.addListener(&apos;change&apos;, updateUI);</span><br><span class="line"></span><br><span class="line">// ..之后移除Realm通知</span><br><span class="line">realm.removeListener(&apos;change&apos;, updateUI);</span><br><span class="line"></span><br><span class="line">// .或者将所有通知取消注册</span><br><span class="line">realm.removeAllListeners();</span><br></pre></td></tr></table></figure><h3 id="Collection-通知"><a href="#Collection-通知" class="headerlink" title="Collection 通知"></a>Collection 通知</h3><p>Collection通知包含描述在细粒度级别发生了哪些更改的信息。这包括自上次通知以来插入，删除或修改的对象的索引。Collection通知异步传递：首先使用初始结果，然后在任何修改Collection中的任何对象的写入事务之后，从集合中删除对象，或向集合中添加新对象。</p><p>当这些变化发生时，<code>addListener</code>通知回调函数会收到两个参数。第一个是更改的collection，第二个是具有关于由删除，插入和修改影响的集合索引的信息的<code>changes</code>对象。</p><p>前两项，<strong>删除</strong>和<strong>插入</strong>，每当对象开始和停止作为collection的一部分时，记录索引。当您将对象添加到realm或将其从realm中删除时，这将考虑在内。对于<code>Results</code>，当您过滤特定值并且对象已更改，以使其现在与查询匹配或不匹配时，此操作也适用。对于基于<code>List</code>的collection，这适用于从关系中添加或删除对象时。</p><p>当对象的属性发生更改时，您的应用程序将被通知有关修改，该属性以前是collection的一部分，并且仍然是其中的一部分。当一对多关系发生变化时，也会发生这种情况，但不考虑反向关系的变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Dog &#123;&#125;</span><br><span class="line">Dog.schema = &#123;</span><br><span class="line">  name: &apos;Dog&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name:  &apos;string&apos;,</span><br><span class="line">    age: &apos;int&apos;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Person &#123;&#125;</span><br><span class="line">Person.schema = &#123;</span><br><span class="line">  name: &apos;Person&apos;,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    name:    &#123;type: &apos;string&apos;&#125;,</span><br><span class="line">    dogs:    &#123;type: &apos;list&apos;, objectType: &apos;Dog&apos;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>让我们假设您正在观察上面的模型代码给出的狗主人列表。当以下情况下，您将收到关于匹配的<code>Person</code>对象的修改的通知：</p><ul><li>您修改<code>Person</code>的<code>name</code>属性。</li><li>你添加或删除<code>Dog</code>给<code>Person</code>的<code>dogs</code>属性。</li><li>您修改属于该<code>Person</code>的 <code>Dog</code>的 <code>age</code> 属性。</li></ul><p>这使得可以离散地控制对UI内的内容进行的动画和视觉更新，而不是在每次发生通知时任意重新加载所有内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 注册通知</span><br><span class="line">realm.objects(&apos;Dog&apos;).filtered(&apos;age &lt; 2&apos;).addListener((puppies, changes) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  // 更新UI以响应插入的对象</span><br><span class="line">  changes.insertions.forEach((index) =&gt; &#123;</span><br><span class="line">    let insertedDog = puppies[index];</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 更新UI以响应修改的对象</span><br><span class="line">  changes.modifications.forEach((index) =&gt; &#123;</span><br><span class="line">    let modifiedDog = puppies[index];</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 更新UI以响应已删除的对象</span><br><span class="line">  changes.deletions.forEach((index) =&gt; &#123;</span><br><span class="line">    // 已删除的对象无法直接访问</span><br><span class="line">    // 支持即将访问已删除的对象...</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 取消注册所有的通知</span><br><span class="line">realm.removeAllListeners();</span><br></pre></td></tr></table></figure><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>在Node.js环境中进行同步，对于Linux系统来说是专业版功能，且必须在有许可的情况下才能执行。</p><p>在Linux系统中使用Node.js，需要指定访问许可获取token启动Sync功能。这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const token = &quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...&quot;;</span><br><span class="line"></span><br><span class="line">// Unlock Professional Edition APIs</span><br><span class="line">Realm.Sync.setFeatureToken(token);</span><br></pre></td></tr></table></figure><p>Realm平台跨网络扩展数据库可以实现跨设备数据同步。为了实现这种同步，Realm提供一组新的类型和类支持被同步的Realm；这些新的类型和类与现存的Realm移动数据库是协同关系。</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>Realm对象服务器中的中心对象是与被同步的Realm相关联的Realm用户 (<code>Realm.Sync.User</code>) 。 <code>User</code> 访问共享Realm可以通过用户名/密码的方式进行验证，或者通过第三方验证数字验证。</p><p>创建及注册用户需要两个东西：</p><ul><li>可以连接到Realm对象服务器的URL</li><li>表明该用户适用于该验证机制的凭据（例如：用户名/密码，权限密码，等等）</li></ul><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>创建用户id及用户登录需要用到验证。请参考我们的<a href="https://realm.io/docs/realm-object-server/#authentication" target="_blank" rel="noopener">认证文件</a>查找Realm移动平台支持的验证提供者。</p><p>指定用户的凭据信息可以通过以下几种方式建立:</p><ul><li>提供一个有效的用户名/密码组合</li><li>提供一个从Realm支持的第三方验证服务商处获得的token</li><li>提供一个token和一个自定义认证提供程序（参见 <a href="https://realm.io/docs/realm-object-server/#custom-authentication" target="_blank" rel="noopener">自定义身份验证</a>）</li></ul><p>用户名和密码验证完全由Realm对象服务器管理，允许你完全控制自己的应用程序用户管理。对于其他的验证方法，你的应用程序会登录外部服务器并获取验证token.</p><p>下面是一些不同的提供者设置凭证示例.</p><h5 id="用户名-密码"><a href="#用户名-密码" class="headerlink" title="用户名/密码"></a>用户名/密码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Realm.Sync.User.login(&apos;http://my.realm-auth-server.com:9080&apos;, &apos;username&apos;, &apos;p@s$w0rd&apos;).then(user =&gt; &#123;</span><br><span class="line">  // user is logged in</span><br><span class="line">  // do stuff ...</span><br><span class="line">&#125;).catch(error =&gt; &#123;</span><br><span class="line">  // an auth error has occurred</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用户登录之前，必须先创建账户。你可以使用<code>Admin Dashboard</code>提前在服务器上创建，或者通过调用<code>注册（register）</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Realm.Sync.User.register(&apos;http://my.realm-auth-server.com:9080&apos;, &apos;username&apos;, &apos;p@s$w0rd&apos;, (error, user) =&gt; &#123; /* ... */ &#125;);</span><br></pre></td></tr></table></figure><h5 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const googleAccessToken = &apos;acc3ssT0ken...&apos;;</span><br><span class="line">Realm.Sync.User.registerWithProvider(&apos;http://my.realm-auth-server.com:9080&apos;, &apos;google&apos;, googleAccessToken, (error, user) =&gt; &#123; /* ... */ &#125;);</span><br></pre></td></tr></table></figure><h5 id="Facebook"><a href="#Facebook" class="headerlink" title="Facebook"></a>Facebook</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const fbAccessToken = &apos;acc3ssT0ken...&apos;;</span><br><span class="line">Realm.Sync.User.registerWithProvider(&apos;http://my.realm-auth-server.com:9080&apos;, &apos;facebook&apos;, fbAccessToken, (error, user) =&gt; &#123; /* ... */ &#125;);</span><br></pre></td></tr></table></figure><h5 id="Custom-Auth"><a href="#Custom-Auth" class="headerlink" title="Custom Auth"></a>Custom Auth</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// The user token provided by your authentication server</span><br><span class="line">const accessToken = &apos;acc3ssT0ken...&apos;;</span><br><span class="line"></span><br><span class="line">const user = Realm.Sync.User.registerWithProvider(</span><br><span class="line">  &apos;http://my.realm-auth-server.com:9080&apos;,</span><br><span class="line">  &apos;custom/fooauth&apos;,</span><br><span class="line">  accessToken,</span><br><span class="line">  (error, user) =&gt; &#123; /* ... */ &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><em>注</em>：JavaScript软件工具开发包目前不允许发送额外数据。如需要发送不止一个token，请将额外数据加密成JSON并通过accessToken参数传输，再在服务器端解码字符串。</p><h5 id="Logging-Out"><a href="#Logging-Out" class="headerlink" title="Logging Out"></a>Logging Out</h5><p>Logging out of a synced Realm is simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.logout();</span><br></pre></td></tr></table></figure><p>When a user is logged out, the synchronization will stop. A logged out user can no longer open a synced Realm.</p><h4 id="Working-with-Users"><a href="#Working-with-Users" class="headerlink" title="Working with Users"></a>Working with Users</h4><p>The sync server URL may contain the tilde character (“~”) which will be transparently expanded to represent the user’s unique identifier. This scheme easily allows you to write your app to cater to its individual users. The location on disk for shared Realms is managed by the framework, but can be overridden if desired.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Realm.Sync.User.login(/* ... */, (error, user) =&gt; &#123;</span><br><span class="line">  if (!error) &#123;</span><br><span class="line">    Realm.open(&#123;</span><br><span class="line">      sync: &#123;</span><br><span class="line">        user: user,</span><br><span class="line">        url: &apos;realm://object-server-url:9080/~/my-realm&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      schema: [/* ... */]</span><br><span class="line">    &#125;).then(realm =&gt; &#123;</span><br><span class="line">      /* ... */</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Realm.Sync.User.current</code> can be used to obtain the currently logged in user. If no users have logged in or all have logged out, it will return <code>undefined</code>. If there are more than one logged in users, an error will be thrown.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const user = Realm.Sync.User.current;</span><br></pre></td></tr></table></figure><p>If there are likely to be multiple users logged in, you can get a collection of them by calling <code>Realm.Sync.User.all</code>. This will be empty if no users have logged in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let users = Realm.Sync.User.all;</span><br><span class="line"></span><br><span class="line">for(const key in users) &#123;</span><br><span class="line">  const user = users[key];</span><br><span class="line"></span><br><span class="line">  // do something with the user object.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Opening-a-Synchronized-Realm"><a href="#Opening-a-Synchronized-Realm" class="headerlink" title="Opening a Synchronized Realm"></a>Opening a Synchronized Realm</h3><p>You open a synchroized Realm the same say as you open any other Realm. The <a href="https://realm.io/docs/javascript/latest/api/Realm.html#~Configuration" target="_blank" rel="noopener">configuration</a> can be extended with a <code>sync</code> property if you need to configure the synchronization. The optional properties of <code>sync</code> include:</p><ul><li><code>error</code> - a callback for error handling/reporting</li><li><code>validate_ssl</code> - indicating if SSL certificates must be validated</li><li><code>ssl_trust_certificate_path</code> - a path where to find trusted SSL certificates</li></ul><p>The error handling is set up by registering a callback (<code>error</code>) as part of the configuration:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">  sync: &#123; user: userA,</span><br><span class="line">          url: realmUrl,</span><br><span class="line">          error: err =&gt; console.log(err)</span><br><span class="line">        &#125;,</span><br><span class="line">  schema: [&#123; name: &apos;Dog&apos;, properties: &#123; name: &apos;string&apos; &#125; &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var realm = new Realm(config);</span><br></pre></td></tr></table></figure><h4 id="Partially-synchronized-Realms"><a href="#Partially-synchronized-Realms" class="headerlink" title="Partially synchronized Realms"></a>Partially synchronized Realms</h4><p>This feature is included as a tech preview. It is likely to change!</p><p>Instead of synchronized every object, it is possible to synchronize a subset. This partially synchronized Realm is based on a query, and your client will only receive the objects which fulfil the query. A simple example is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">  sync: &#123; user: userA,</span><br><span class="line">          url: realmUrl,</span><br><span class="line">          partial: true,  // &lt;-- this enables a partially synced Realm</span><br><span class="line">        &#125;,</span><br><span class="line">  schema: [&#123; name: &apos;Person&apos;, properties: &#123; name: &apos;string&apos;, age: &apos;int&apos; &#125; &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var realm = new Realm(config);</span><br><span class="line">var partialResults = realm.subscribeToObjects(&apos;Integer&apos;, &apos;age &gt; 5&apos;).then((results, error) =&gt; &#123;</span><br><span class="line">    return results;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// partialResults is updated with objects matching the query</span><br></pre></td></tr></table></figure><p>You may modify objects within the results collection, and these changes will be synced up to the Realm Object Server. Note that conflicts may be resolved differently than if the writes had been made to a fully-synchronized copy of the Realm.</p><h3 id="Working-with-a-Synchronized-Realm"><a href="#Working-with-a-Synchronized-Realm" class="headerlink" title="Working with a Synchronized Realm"></a>Working with a Synchronized Realm</h3><p>Once you have opened a Realm using a URL to a Realm Object Server and a <code>User</code>object, you can interact with it as you would any other Realm in JavaScript.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">realm.write(() =&gt; &#123;</span><br><span class="line">  realm.create(&apos;MyObject&apos;, jsonData);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var objects = realm.objects(&apos;MyObject&apos;);</span><br></pre></td></tr></table></figure><h3 id="Sync-Sessions"><a href="#Sync-Sessions" class="headerlink" title="Sync Sessions"></a>Sync Sessions</h3><p>A synced Realm’s connection to the Realm Object Server is represented by a <code>Session</code>object. Session objects can be retrieved by calling <code>realm.syncSession</code>.</p><p>The state of the underlying session can be retrieved using the <code>state</code> property. This can be used to check whether the session is active, not connected to the server, or in an error state.</p><h4 id="Progress-notifications"><a href="#Progress-notifications" class="headerlink" title="Progress notifications"></a>Progress notifications</h4><p>Session objects allow your app to monitor the status of a session’s uploads to and downloads from the Realm Object Server by registering a progress notification callback on a session object by calling [realm.syncSession.addProgressNotification(direction, mode, callback)] or one of the asynchronous methods <code>Realm.open</code> and <code>Realm.openAsync</code>. (<em>these methods support only a subset of the progress notifications modes</em>)</p><p>Progress notification callbacks will be invoked periodically by the synchronization subsystem. As many callbacks as needed can be registered on a session object simultaneously. Callbacks can either be configured to report upload progress or download progress.</p><p>Each time a callback is called, it will receive the current number of bytes already transferred, as well as the total number of transferable bytes (defined as the number of bytes already transferred plus the number of bytes pending transfer).</p><p>To stop receiving progress notifications a callback can be unregistered using [realm.syncSession.removeProgressNotification(callback)]. Calling the function a second time with the same callback is ignored.</p><p>There are two <a href="https://realm.io/docs/javascript/latest/api/reference/Realms.Sync.ProgressMode.html#fields" target="_blank" rel="noopener">progress notification modes</a> for the progress notifications:</p><ul><li><code>reportIndefinitely</code> - the registration will stay active until the callback is unregistered and will always report the most up-to-date number of transferable bytes. This type of callback could be used to control a network indicator UI that, for example, changes color or appears only when uploads or downloads are actively taking place.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let realm = new Realm(config);</span><br><span class="line">const progressCallback = (transferred, transferables) =&gt; &#123;</span><br><span class="line">    if (transferred &lt; transferables) &#123;</span><br><span class="line">        // Show progress indicator</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Hide the progress indicator</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">realm.syncSession.addProgressNotification(&apos;upload&apos;, &apos;reportIndefinitely&apos;, progressCallback);</span><br><span class="line">// ...</span><br><span class="line">realm.syncSession.removeProgressNotification(progressCallback);</span><br></pre></td></tr></table></figure><ul><li><code>forCurrentlyOutstandingWork</code> - the registration will capture the number of transferable bytes at the moment it is registered and always report progress relative to that value. Once the number of transferred bytes reaches or exceeds that initial value, the callback will be automatically unregistered. This type of progress notification could, for example, be used to control a progress bar that tracks the progress of an initial download of a synced Realm when a user signs in, letting them know how long it is before their local copy is up-to-date.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let realm = new Realm(config);</span><br><span class="line">const progressCallback = (transferred, transferable) =&gt; &#123;</span><br><span class="line">    const progressPercentage = transferred / transferable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">realm.syncSession.addProgressNotification(&apos;download&apos;, &apos;forCurrentlyOutstandingWork&apos;, progressCallback);</span><br><span class="line">// ...</span><br><span class="line">realm.syncSession.removeProgressNotification(progressCallback);</span><br></pre></td></tr></table></figure><p>The asynchronous methods <code>Realm.open</code> and <code>Realm.openAsync</code> for opening a Realm can also be used to register a callback for sync progress notifications. In this case only ‘download’ direction and ‘forCurrentlyOutstandingWork’ mode are supported. Additional callbacks can be registered after the initial open is completed by using the newly created Realm instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Realm.open(config)</span><br><span class="line">      .progress((transferred, transferable) =&gt; &#123;</span><br><span class="line">          // update UI</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(realm =&gt; &#123;</span><br><span class="line">          // use the Realm</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((e) =&gt; reject(e));</span><br><span class="line"></span><br><span class="line">Realm.openAsync(config,</span><br><span class="line">          (error, realm) =&gt; &#123;</span><br><span class="line">             // use the Realm or report an error</span><br><span class="line">          &#125;,</span><br><span class="line">          (transferred, transferable) =&gt; &#123;</span><br><span class="line">            // update UI</span><br><span class="line">          &#125;, );</span><br></pre></td></tr></table></figure><h3 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h3><p>The Realm Mobile Platform provides flexible access control mechanisms to restrict which users are allowed to sync against which Realm files. This can be used, for example, to create collaborative apps where multiple users write to the same Realm. It can also be used to share data in a publisher/subscriber scenario where a single writing user shares data with many users with read permissions.</p><p>There are three permissions that control the access level of a given Realm for a User:</p><ul><li><code>mayRead</code> indicates that the user is allowed to read from the Realm.</li><li><code>mayWrite</code> indicates that the user is allowed to write to the Realm.</li><li><code>mayManage</code> indicates that the user is allowed to change the permissions for the Realm.</li></ul><p>Unless permissions are explicitly modified, only the owner (creator) of a Realm can access it. The only exception is admin users: They are always granted all permissions to all Realms on the server.</p><p><strong>Write-only</strong> permissions (i.e., <code>mayWrite</code> set without <code>mayRead</code>) are not currently supported.</p><p>Please refer to the general Realm Object Server documentation on <a href="https://realm.io/docs/realm-object-server/latest/#access-control" target="_blank" rel="noopener">Access Control</a> to learn more about the concept.</p><h4 id="Retrieving-Permissions"><a href="#Retrieving-Permissions" class="headerlink" title="Retrieving Permissions"></a>Retrieving Permissions</h4><p>To get a collection of all the Permissions a user has been granted, use the <code>User.getGrantedPermissions</code> method:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const permissions = user.getGrantedPermissions(&quot;currentUser&quot;);</span><br><span class="line"></span><br><span class="line">// Permissions is a regular query</span><br><span class="line">const writePermissions = permissions.filtered(&quot;mayWrite = true&quot;);</span><br><span class="line"></span><br><span class="line">// Queries are live and emit notifications</span><br><span class="line">writePermissions.addListener((collection, changes) =&gt; &#123;</span><br><span class="line">    // handle permission changes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To get permissions granted <strong>by</strong> a user, pass in <code>&quot;otherUser&quot;</code>.</p><h4 id="Modifying-Permissions"><a href="#Modifying-Permissions" class="headerlink" title="Modifying Permissions"></a>Modifying Permissions</h4><p>Modifying the access control settings for a Realm file is performed by either applying permissions directly or offering them.</p><h5 id="Granting-Permissions"><a href="#Granting-Permissions" class="headerlink" title="Granting Permissions"></a>Granting Permissions</h5><p>Permission changes can be applied (i.e. granted or revoked) via the <code>User.applyPermissions</code> method in order to directly increase or decrease other users’ access level to a Realm.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const condition = &#123; userId: &apos;some-user-id&apos; &#125;;</span><br><span class="line">const realmUrl = &quot;realm://my-server.com/~/myRealm&quot;;</span><br><span class="line">user.applyPermissions(condition, realmUrl, &apos;read&apos;);</span><br></pre></td></tr></table></figure><p>The <code>condition</code> parameter must be an object containing either</p><ul><li><code>userId</code> - use this to apply permissions based on a user’s identity (the internal Id that Realm generates).</li><li><code>metadataKey</code> and <code>metadataValue</code> - use the key <code>&#39;email&#39;</code> and an email address as the value to specify a user via the Username/Password provider.</li></ul><p>The last argument controls the access level that the user will be granted. Higher access implies all lower tiers, e.g. <code>write</code> implies <code>read</code>, <code>admin</code> implies <code>read</code> and <code>write</code>. If <code>none</code> is passed, this will revoke the user’s permissions for this Realm.</p><h5 id="Offer-Response"><a href="#Offer-Response" class="headerlink" title="Offer/Response"></a>Offer/Response</h5><p>A user can offer permissions to their Realm by sharing the opaque token returned by <code>offerPermissionsAsync</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const realmUrl = &apos;realm://my-server.com/~/myRealm&apos;;</span><br><span class="line">const oneDay = 1000 * 60 * 60 * 24;</span><br><span class="line">const expiration = new Date(Date.now() + 7 * oneDay);</span><br><span class="line">userA.offerPermissions(realmUrl, &apos;write&apos;, expiration)</span><br><span class="line">  .then(token =&gt; &#123; /* ... */ &#125;);</span><br></pre></td></tr></table></figure><p>The optional <code>expiresAt</code> argument controls when the offer expires - i.e. using the token after that date will no longer grant permissions to that Realm. Users who have already consumed the token to obtain permissions will not lose their access after that date. If you want to revoke permissions, use <code>applyPermissionsAsync</code>.</p><p>Once a user has received a token, e.g. by sharing it via messaging app, or scanning a QR code, they can consume it to obtain the permissions offered:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const token = &quot;...&quot;;</span><br><span class="line">userB.acceptPermissionOffer(token)</span><br><span class="line">  .then(realmUrl =&gt; Realm.open(&#123; schema: [/* ... */], sync: &#123; user: userB, url: realmUrl &#125;&#125;))</span><br><span class="line">  .then(realm =&gt; &#123;</span><br><span class="line">    // ..use the realm</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Migrating-from-Realm-Object-Server-1-x-to-2-x"><a href="#Migrating-from-Realm-Object-Server-1-x-to-2-x" class="headerlink" title="Migrating from Realm Object Server 1.x to 2.x"></a>Migrating from Realm Object Server 1.x to 2.x</h3><p>If you upgrade Realm Object Server from version 1.x to 2.x, your Realms <strong>must</strong> be migrated. The new file format is incompatible, and Realms have to be re-downloaded.</p><p>When a synchronized Realm requiring migration is opened, the Realm file will be copied to a backup location and then deleted so that it can be re-downloaded from the Realm Object Server. An exception will be thrown, and you can choose to migrate your objects from the old Realm.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Realm.open(config)</span><br><span class="line">  .then(realm =&gt; &#123;</span><br><span class="line">    // you have probably already migrated</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(e =&gt; &#123;</span><br><span class="line">    if (e.name == &quot;IncompatibleSyncedRealmError&quot;) &#123;</span><br><span class="line">      const backupRealm = new Realm(e.configuration);</span><br><span class="line">      // copy objects from backupRealm</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><p>Please take note of the Export Compliance section of our LICENSE, as it places restrictions against the usage of Realm if you are located in countries with an export restriction or embargo from the United States.</p><p>Realm supports encrypting the database file on disk with AES-256+SHA2 by supplying a 64-byte encryption key when creating a Realm.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var key = new Int8Array(64);  // pupulate with a secure key</span><br><span class="line">Realm.open(&#123;schema: [CarObject], encryptionKey: key&#125;)</span><br><span class="line">  .then(realm =&gt; &#123;</span><br><span class="line">    // Use the Realm as normal</span><br><span class="line">    var dogs = realm.objects(&apos;Car&apos;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>This makes it so that all of the data stored on disk is transparently encrypted and decrypted with AES-256 as needed, and verified with a SHA-2 HMAC. The same encryption key must be supplied every time you obtain a Realm instance.</p><p>There is a small performance hit (typically less than 10% slower) when using encrypted Realms.</p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><h3 id="Missing-Realm-Constructor"><a href="#Missing-Realm-Constructor" class="headerlink" title="Missing Realm Constructor"></a>Missing Realm Constructor</h3><p>If your app crashes, telling you that the Realm constructor was not found, there are a few things you can try:</p><p>First of all, run <code>react-native link realm</code></p><p>If that doesn’t help, and your problem is on Android, try:</p><p>Add the following in your <code>MainApplication.java</code> file: <code>java import io.realm.react.RealmReactPackage;</code></p><p>And add the <code>RealmReactPackage</code> to the list of packages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected List getPackages() &#123;</span><br><span class="line">    return Arrays.asList(</span><br><span class="line">        new MainReactPackage(),</span><br><span class="line">        new RealmReactPackage() // add this line</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add following two lines in <code>settings.gradle</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:realm&apos;</span><br><span class="line">project(&apos;:realm&apos;).projectDir = new File(settingsDir, &apos;../node_modules/realm/android&apos;)</span><br></pre></td></tr></table></figure><p>If your problem is on iOS, try: 1. Close all simulators/device builds 2. Stop the package manager running in terminal (or better yet, just restart terminal) 3. Open the ios folder in your app root in finder 4. Go into the build folder (note: you won’t see this build folder in atom, so just right click ios and click open in finder) 5. Delete everything inside of the build folder (just move to trash and keep trash around in case you’re worried) 6. Run <code>react-native run-ios</code> to rebuild the whole thing</p><h3 id="Chrome-Debugging-is-slow"><a href="#Chrome-Debugging-is-slow" class="headerlink" title="Chrome Debugging is slow"></a>Chrome Debugging is slow</h3><p>We are aware of this. The reason for this is that since Realm is written in C++ and runs native code, it has to run on the device/simulator. But given the zero-copy architecture, we need to send values in realm objects over the RPC wire every time you inspect an object that is stored in a Realm.</p><p>We are investigating various potential solutions for this problem. If you want to keep track of it, you can follow the <a href="https://github.com/realm/realm-js/issues/491" target="_blank" rel="noopener">GitHub issue</a>.</p><h3 id="Crash-Reporting"><a href="#Crash-Reporting" class="headerlink" title="Crash Reporting"></a>Crash Reporting</h3><p>We encourage you to use a crash reporter in your application. Many Realm operations could potentially fail at runtime (like any other disk IO), so collecting crash reports from your application will help identify areas where either you (or us) can improve error handling and fix crashing bugs.</p><p>Most commercial crash reporters have the option of collecting logs. We strongly encourage you to enable this feature. Realm logs metadata information (but no user data) when throwing exceptions and in irrecoverable situations, and these messages can help debug when things go wrong.</p><h2 id="Getting-help"><a href="#Getting-help" class="headerlink" title="Getting help"></a>Getting help<img src="https://realm.io/assets/svg/docs/thumbs-up.svg" alt="img"><img src="https://realm.io/assets/svg/docs/thumbs-down.svg" alt="img"></h2><ul><li><strong>Need help with your code?</strong> <a href="http://stackoverflow.com/questions/ask?tags=realm" target="_blank" rel="noopener">Ask on StackOverflow</a>. We actively monitor &amp; answer questions on SO!</li><li><strong>Have a bug to report?</strong> <a href="https://github.com/realm/realm-js/issues/new" target="_blank" rel="noopener">Open an issue on our repo</a>. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.</li><li><strong>Have a feature request?</strong> <a href="https://github.com/realm/realm-js/issues/new" target="_blank" rel="noopener">Open an issue on our repo</a>. Tell us what the feature should do, and why you want the feature.</li><li><strong>Love to follow what comes up next?</strong> <a href="https://github.com/realm/realm-js/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Look at our changelog</a>. The log shows the latest additions and changes we plan to release soon, and the history of how Realm has evolved.<a href="https://realm.io/cn/products/realm-platform" target="_blank" rel="noopener"> <img src="https://realm.io/assets/img/home/features/radar.jpg" alt="Two‑way data sync, real‑time collaboration, offline‑first applications, API bridge, data push"> </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍 &quot;&gt;&lt;/a&gt;介绍 &lt;img src=&quot;https://realm.io/assets/svg/docs/thumbs-up.svg&quot; alt=&quot;img&quot;&gt;&lt;img src
      
    
    </summary>
    
      <category term="database" scheme="http://blog.lijunbo.com/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>如何开发一个JavaScript库</title>
    <link href="http://blog.lijunbo.com/2018/03/02/npm_lib/"/>
    <id>http://blog.lijunbo.com/2018/03/02/npm_lib/</id>
    <published>2018-03-02T01:44:44.000Z</published>
    <updated>2019-10-08T10:39:52.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="NPM包管理器"><a href="#NPM包管理器" class="headerlink" title="NPM包管理器"></a><a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM包管理器</a></h3><ul><li><a href="http://javascript.ruanyifeng.com/nodejs/npm.html#" target="_blank" rel="noopener">NPM 基础</a> </li><li><a href="https://github.com/wy-ei/notebook/issues/42#issuecomment-266946999" target="_blank" rel="noopener">NPM 相关知识</a> </li><li><a href="https://github.com/jaywcjlove/handbook/blob/master/CentOS/%E5%9C%A85%E5%88%86%E9%92%9F%E5%86%85%E6%90%AD%E5%BB%BA%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8%E7%A7%81%E6%9C%89npm%E4%BB%93%E5%BA%93.md" target="_blank" rel="noopener">在5分钟内搭建企业内部私有npm仓库</a> </li><li><a href="https://github.com/cssmagic/blog/issues/56" target="_blank" rel="noopener">基于 Webpack 和 ES6 打造 JavaScript 类库</a> </li></ul><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a><a href="https://webpack.github.io/" target="_blank" rel="noopener">Webpack</a></h3><ul><li><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">Webpack CN1</a> </li><li><a href="https://doc.webpack-china.org/" target="_blank" rel="noopener">Webpack CN2</a></li></ul><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a><a href="http://babeljs.io/" target="_blank" rel="noopener">Babel</a></h3><ul><li><a href="https://babeljs.cn/" target="_blank" rel="noopener">Babel CN</a> </li></ul><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a><a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a></h3><ul><li><a href="https://eslint.cn/" target="_blank" rel="noopener">ESLint CN</a></li></ul><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a><a href="http://mochajs.org/" target="_blank" rel="noopener">Mocha</a></h3><ul><li><a href="https://github.com/zhaosaisai/mocha-in-chinese" target="_blank" rel="noopener">mocha中文文档</a></li></ul><h3 id="Chai"><a href="#Chai" class="headerlink" title="Chai"></a><a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a></h3><ul><li><a href="http://blog.csdn.net/fly_home_ysc/article/details/76082302" target="_blank" rel="noopener">前端自动化测试之chai.js断言库</a>  </li></ul><h3 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a><a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">UMD</a></h3><h2 id="实践过程"><a href="#实践过程" class="headerlink" title="实践过程"></a>实践过程</h2><ul><li><a href="https://blog.cuiyongjian.com/2017/07/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwebpack%E5%89%8D%E7%AB%AF%E7%B1%BB%E5%BA%93%E8%84%9A%E6%89%8B%E6%9E%B6[1]-%E5%BC%80%E7%AB%AF/" target="_blank" rel="noopener">从零开始搭建一个webpack前端类库脚手架[1]-开端</a> </li><li><a href="https://blog.cuiyongjian.com/2017/07/23/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwebpack%E5%89%8D%E7%AB%AF%E7%B1%BB%E5%BA%93%E8%84%9A%E6%89%8B%E6%9E%B6[2]-%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">从零开始搭建一个webpack前端类库脚手架[2]-插件及常用解决方案</a> </li><li><a href="https://blog.cuiyongjian.com/2017/07/27/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwebpack%E5%89%8D%E7%AB%AF%E7%B1%BB%E5%BA%93%E8%84%9A%E6%89%8B%E6%9E%B6[3]-%E5%BC%BA%E6%82%8D%E7%9A%84babel/" target="_blank" rel="noopener">从零开始搭建一个webpack前端类库脚手架[3]-强悍的babel</a> </li><li><a href="https://blog.cuiyongjian.com/2017/07/28/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwebpack%E5%89%8D%E7%AB%AF%E7%B1%BB%E5%BA%93%E8%84%9A%E6%89%8B%E6%9E%B6[4]-%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">从零开始搭建一个webpack前端类库脚手架[4]-实践</a> </li><li><a href="https://blog.cuiyongjian.com/2017/08/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwebpack%E5%89%8D%E7%AB%AF%E7%B1%BB%E5%BA%93%E8%84%9A%E6%89%8B%E6%9E%B6[5]-%E6%B5%8B%E8%AF%95%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">从零开始搭建一个webpack前端类库脚手架[5]-测试你的代码</a> </li><li><a href="https://blog.cuiyongjian.com/2017/08/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwebpack%E5%89%8D%E7%AB%AF%E7%B1%BB%E5%BA%93%E8%84%9A%E6%89%8B%E6%9E%B6[6]-%E5%9C%A8github%E4%B8%8A%E5%BC%80%E6%BA%90/" target="_blank" rel="noopener">从零开始搭建一个webpack前端类库脚手架[6]-在github上开源</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相关知识&quot; class=&quot;headerlink&quot; title=&quot;相关知识&quot;&gt;&lt;/a&gt;相关知识&lt;/h2&gt;&lt;h3 id=&quot;NPM包管理器&quot;&gt;&lt;a href=&quot;#NPM包管理器&quot; class=&quot;headerlink&quot; title=&quot;NPM
      
    
    </summary>
    
      <category term="library" scheme="http://blog.lijunbo.com/categories/library/"/>
    
    
  </entry>
  
  <entry>
    <title>人之初,性本善,将之老,性乃迁?</title>
    <link href="http://blog.lijunbo.com/2018/02/12/day_004/"/>
    <id>http://blog.lijunbo.com/2018/02/12/day_004/</id>
    <published>2018-02-12T08:49:34.000Z</published>
    <updated>2019-10-08T10:39:52.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事因"><a href="#事因" class="headerlink" title="事因"></a>事因</h3><p>由于我的爱人, 生完孩子之后一直气血两虚. 为此, 我趁着假期期间, 为她进行食疗.</p><p>我刚刚出去, 买了一个乌鸡, 然后去宏泰大药房抓了两味中药 - 人参 | 天麻 .</p><p>一个老头一脸全世界都欠他钱似的说: 人参2元钱, 很贵,要吗?</p><p>我说:”一两吗”?  他眉毛上调道 : “ 1g ! “. </p><p>我应道:”要,就炖一只鸡而已!”</p><p>可能是我敏感, 我感觉这个老头并非善类.</p><p>在我结账的时候,我就让店员给我打印了明细.</p><p>在我去水果摊买水果的时候,就让人家给我称了一下(我跟水果摊的老板比较熟).</p><p>水果摊称重是: 人参-10g, 天麻-40g.  药店称重是: 人参-15g, 天麻-40g. </p><p>除此之外,我发现还多出莫名其妙的13元.</p><p>少了我5g人参. 2.4元 *5g = 12元 + 13元 = 总共多要了我25元!</p><p>我就回去找了一下. 店员给我退了那莫名其妙的13元. 然后她说:”你说的人参不是10g,是15g,还要吗?”</p><p>你懂得,我不可能为了那12元, 耽误我爱人的食补.</p><h3 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h3><p>我最大的感触就是:物以类聚,人以群分! 远离垃圾人!</p><p>间接地我也明白了:为什么大多数在一线打拼的年轻人不愿意回家乡发展了.</p><p>大城市的医疗体系基本上都是透明的.比如一味药几克几两, 每克多少钱, 都清清楚楚明明白白的.</p><p>我们都习惯这种公开透明且相对公平的生活环境. 重点是,我们起初都是相信人性的美好.</p><p>我们都相信你们只是简简单单地做事而已, 根本不会上升到小利小惠的算计上.</p><p>虽然我讲的有失偏颇, 但这也是一个点,一个面吧.</p><h3 id="内修"><a href="#内修" class="headerlink" title="内修"></a>内修</h3><p>我想说一句狠话:大爷您这么大年纪了, 就不为您的子孙后代积点德吗?</p><p>还是多修点了凡四训吧 !</p><p>文字记录一下, 就此翻篇.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事因&quot;&gt;&lt;a href=&quot;#事因&quot; class=&quot;headerlink&quot; title=&quot;事因&quot;&gt;&lt;/a&gt;事因&lt;/h3&gt;&lt;p&gt;由于我的爱人, 生完孩子之后一直气血两虚. 为此, 我趁着假期期间, 为她进行食疗.&lt;/p&gt;
&lt;p&gt;我刚刚出去, 买了一个乌鸡, 然后去宏泰
      
    
    </summary>
    
      <category term="diary" scheme="http://blog.lijunbo.com/categories/diary/"/>
    
    
  </entry>
  
  <entry>
    <title>6个简单的步骤来自动测试和部署你的JavaScript程序到GitHub页面</title>
    <link href="http://blog.lijunbo.com/2018/02/05/automatically_test_deploy_js_app_to_github_pages/"/>
    <id>http://blog.lijunbo.com/2018/02/05/automatically_test_deploy_js_app_to_github_pages/</id>
    <published>2018-02-05T03:11:11.000Z</published>
    <updated>2019-10-08T10:39:52.109Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1600/1*7NIjF1hy4crepll1cnaxzA.png" alt="img"></p><p>Workflow as per example below</p><p>Wouldn’t it be amazing if your new React app tested and deployed itself automatically? It’s very simple thanks to GitHub and Travis CI (CI stands for Continuous Integration).</p><p>This guide is for you if you:</p><ul><li><strong>Know</strong> how to create a JavaScript app. This example focuses on a simple React app, but all apps that follow the typical test and build jobs can be adapted.</li><li><strong>Know</strong> what unit tests are.</li><li><strong>Reasonably familiar</strong> with Git and/or GitHub.</li><li><strong>Reasonably familiar</strong> with the command line.</li><li><strong>Don’t know</strong> how to set up automatic tests and deployment.</li><li><strong>Need</strong> free hosting to show off your latest JavaScript project.</li></ul><p>The guide will show how to create a simple React application, push it to GitHub, link it to Travis CI and then to GitHub Pages. The tutorial will not focus on what React is.</p><hr><h3 id="Step-1-Create-a-JavaScript-app-Add-tests"><a href="#Step-1-Create-a-JavaScript-app-Add-tests" class="headerlink" title="Step 1. Create a JavaScript app. Add tests."></a>Step 1. Create a JavaScript app. Add tests.</h3><p>For the purposes of this tutorial I will be using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">create-react-app</a>, an ingenious tool for quick and tool-less creation of React apps. Apps made using the tool already have a sample unit test written.</p><ul><li>Make sure you have <a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJS and NPM</a> installed. Run quick test commands <code>node -v</code> and <code>npm -v</code> to double-check.</li><li>Run<code>npm install -g create-react-app</code> to install the create-react-app utility globally on your computer</li><li>To create a new app, <code>create-react-app test-app</code> . This command takes some time. Once complete, your app will be located in the /test-app directory.</li><li>Make sure the app runs properly. Navigate to the project directory and run <code>npm run start</code> or <code>npm start</code> to start the development server. Once everything works, cancel the task by pressing ctrl+c.</li><li>Make sure that <code>npm run test</code> runs successfully. It should have a single test suite setup with a single test in it.</li><li>Make sure the <code>npm run build</code> command works. It should create a deployment-ready build in the /build folder.</li></ul><h3 id="Step-2-Create-a-GitHub-repository-push-your-app"><a href="#Step-2-Create-a-GitHub-repository-push-your-app" class="headerlink" title="Step 2. Create a GitHub repository, push your app."></a>Step 2. Create a GitHub repository, push your app.</h3><p>Create an empty repository in GitHub without any files it. Make sure you have an SSH key added for your machine, then add your project files to a new git repo, then push it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin (URL OF YOUR REPOSITORY)</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>Refresh your repository page to make sure your app is now on GitHub.</p><h3 id="Step-3-Generate-a-GitHub-token"><a href="#Step-3-Generate-a-GitHub-token" class="headerlink" title="Step 3. Generate a GitHub token."></a>Step 3. Generate a GitHub token.</h3><p>On GitHub, go to your account settings -&gt; <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Tokens</a>.</p><p>Generate a new token. The token has to have the ‘repo’ scope selected in order to be able to access your repositories. Save the token in a save place and do not include in any public repositories in plain text. The token will be used in the next section.</p><p><strong>Note</strong>: the token should not be shared with anyone, it essentially gives an app access to edit your repositories.</p><h3 id="Step-4-Link-your-project-to-Travis-CI-add-the-travis-yml-file"><a href="#Step-4-Link-your-project-to-Travis-CI-add-the-travis-yml-file" class="headerlink" title="Step 4. Link your project to Travis CI, add the .travis.yml file."></a>Step 4. Link your project to Travis CI, add the .travis.yml file.</h3><p>If you haven’t already, <a href="https://travis-ci.org/" target="_blank" rel="noopener">create a Travis CI profile</a> using your GitHub profile. Add your newly added GitHub project to Travis using the green switch.</p><p>Before we create the Travis config file, we will add the GitHub token you created above to the Travis project. Go to the project settings in Travis and add a new <strong>Environmental Variable</strong>. Call the variable <strong>github_token</strong>, and set the value to the token you got from GitHub. This will enable Travis to use your token without you having to publicly put in in your repository.</p><p>Add the following <code>.travis.yml</code> file to the root directory of your project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - &quot;stable&quot;</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">script:</span><br><span class="line">  - npm test</span><br><span class="line">  - npm run build</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip_cleanup: true</span><br><span class="line">  github_token: $github_token</span><br><span class="line">  local_dir: build</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>What each line means in the file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br></pre></td></tr></table></figure><p>Tells Travis to use NodeJS.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_js:</span><br><span class="line">  - &quot;stable&quot;</span><br></pre></td></tr></table></figure><p>Tells Travis which version(s) of NodeJS to use. Feel free to add additional versions, such as <code>- &quot;7&quot;</code> or <code>- &quot;6&quot;</code> .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br></pre></td></tr></table></figure><p>Tells Travis to cache the node_modules directory between builds instead of re-compiling the whole directory each time you commit.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:</span><br><span class="line">  - npm test</span><br><span class="line">  - npm run build</span><br></pre></td></tr></table></figure><p><strong>Important bit: </strong>tells Travis which commands to run. Commands run in a succession, and if a command fails (i.e. exits with anything but 0), the build is marked as failed. Failed builds do not get deployed. Note that Travis knows to <code>npm install</code> already.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip_cleanup: true</span><br><span class="line">  github_token: $github_token</span><br><span class="line">  local_dir: build</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>The deployment structure. Detailed documentation about other deployment platforms available can be found <a href="https://docs.travis-ci.com/user/deployment/" target="_blank" rel="noopener">here</a>.</p><p><code>provider: pages</code> specifies we’re using GitHub Pages.</p><p><code>skip_cleanup: true</code> tells Travis not to delete build files.</p><p><code>github_token: $github_token</code> sets the GitHub token. We used an environment variable to avoid exposing our token to the public.</p><p><code>local_dir: build</code> tells Travis to only take the files from the /build directory for deployment</p><p><code>on: branch: master</code> tells Travis when to trigger deployment. We only want to deploy when we push to the master branch of the repository.</p><h3 id="Step-5-Set-the-homepage-address-in-package-json"><a href="#Step-5-Set-the-homepage-address-in-package-json" class="headerlink" title="Step 5. Set the homepage address in package.json"></a>Step 5. Set the homepage address in package.json</h3><p>When you use GitHub Pages, your project is going to be hosted on a URL that looks like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://USERNAME.github.io/PROJECT_NAME/</span><br></pre></td></tr></table></figure><p>Following the above syntax, edit your <code>package.json</code> file to add a new entry with the URL of your project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;https://USERNAME.github.io/PROJECT_NAME/&quot;</span><br></pre></td></tr></table></figure><p>Setting the homepage informs the <code>npm run build</code> to add the right paths to the HTML file generated in the build directory.</p><h3 id="Step-6-Commit-and-push"><a href="#Step-6-Commit-and-push" class="headerlink" title="Step 6. Commit and push."></a>Step 6. Commit and push.</h3><p>Add the new .travis.yml file to git, commit the repository and push it to GitHub. Travis will automatically start building, testing and deploying it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Added the travis file and homepage&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>Travis will queue your project and build it as soon as it can. You can follow the execution on your <a href="https://travis-ci.org/" target="_blank" rel="noopener">home page</a>. Once tested and built — your project will update on GitHub in settings to show that it’s now hosted on GitHub Pages. A new branch called <code>gh-pages</code> is created on your repository. The page contains the output from the <code>npm run build</code> command.</p><h3 id="All-done"><a href="#All-done" class="headerlink" title="All done!"></a><strong>All done!</strong></h3><p>Check the URL created above and you should see your app there. This is the app I used for the guide, feel free to use for reference: <a href="https://github.com/slavabez/medium-test-app" target="_blank" rel="noopener">source code</a>, <a href="https://slavabez.github.io/medium-test-app/" target="_blank" rel="noopener">page hosted on GitHub Pages</a> and the <a href="https://travis-ci.org/slavabez/medium-test-app/" target="_blank" rel="noopener">Travis logs</a>.</p><hr><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><p>Travis CI Docs: <a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">https://docs.travis-ci.com/</a></p><p>Travis CI Docs - GitHub Pages deployment: <a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">https://docs.travis-ci.com/user/deployment/pages/</a></p><p>Create-React-App Docs — Deployment: <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#github-pages" target="_blank" rel="noopener">https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#github-pages</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*7NIjF1hy4crepll1cnaxzA.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;Workflow as per example below&lt;/p&gt;
&lt;p&gt;W
      
    
    </summary>
    
      <category term="ci" scheme="http://blog.lijunbo.com/categories/ci/"/>
    
    
  </entry>
  
  <entry>
    <title>教育的本质</title>
    <link href="http://blog.lijunbo.com/2018/01/14/day_003/"/>
    <id>http://blog.lijunbo.com/2018/01/14/day_003/</id>
    <published>2018-01-14T02:10:57.000Z</published>
    <updated>2019-10-08T10:39:52.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弱谈教育本质"><a href="#弱谈教育本质" class="headerlink" title="弱谈教育本质"></a>弱谈教育本质</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>人的这一辈子是一个很奇妙的过程，好比一滴纯心的墨。</p><p>如果滴落到一瓶水中，此后的半生可能需要不停地沉淀，才能将其澄清；</p><p>如果滴落到一片海中，瞬间的凝结之后，随之而来的就是消融，慢慢地拥有了海的壮阔与平静。</p><p>从上面这个类比当中，我们能意识到一个环境的重要性，尤其是一个教育环境！</p><p>古有“孟母三迁”，今有选择各种“托辅班”，哈哈，是不是戳到各位家长痛点了！</p><p>教育孩子如履薄冰啊，各位宝妈宝爸们该何去何从呢？莫急，听波哥慢慢给您道来。</p><h2 id="人品"><a href="#人品" class="headerlink" title="人品"></a>人品</h2><p>波哥，这些年算是走过南也闯过北，就连传销窝子也趟过水。干过基层的机械工，做过高端的IT民工。</p><p>广东、北京、上海等一线城市辗转流离，随心而安。在企业与公司之间迎来送往，也有小10年了。</p><p>深知一家公司需要的是什么类型的人才。</p><p>开门见山的说：他们需要的是人品好的人！侧重点是人，而不是人才！为什么呢？</p><p>因为如果一个人的能力不足，可以在入职之后慢慢地培养。而如果一个人的人品不好，公司却培养不起。</p><p>为什么培养不起？因为那是一个人从小到大的家教以及学校教育的18个春秋，成本太高！</p><p>关于教育缺失的新闻也不少，在此不再列举，但我们得有心感知人品的重要性。</p><blockquote><p>友情提示：《弟子规》是个宝啊，多多践行，让人生更美好！</p></blockquote><h2 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h2><p>在人品好的前提下，体现一个的人能力的第一要素，波哥认为是一个人生活习惯，工作习惯。</p><p>习惯能给你带来什么好处？请记住这2个关键词：健康，效率！</p><p>小举几例:</p><ul><li>养成多多喝水的好习惯：能防止多少疾病你知道吗？</li><li>养成早睡早起的好习惯：能让你拥有的幸福叫做健康！</li><li>养成善于总结的好习惯：能让你不乱于心也不惧未来！</li><li>养成专注于心的好习惯：岂止是工作效率上的提升？难道没有那种忘我的乐趣？难道没有小小的成就感？</li></ul><p>习惯对于一个人来说，能让你知足，让你有幸福感。</p><p>波哥认识的一位好友就是这种类型的人，慢慢往下读呗，我会引荐给你们认识哦！</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>最后，我们要谈谈知识，说的情怀一点应该叫文化。</p><p>关于什么是文化？我最欣赏的回答，是作家梁晓声的四句概括：</p><blockquote><p>1.根植于内心的修养；</p><p>2.无需提醒的自觉；</p><p>3.以约束为前提的自由；</p><p>4.为别人着想的善良。</p></blockquote><p>有木有发现这段总结，其实是包括我们之前谈论的人品和习惯，在哪里体现的呢？</p><p>善良是不是人品？约束是不是习惯？</p><p>其实，波哥在这里想谈的更多是知识，应该更确切一点的说是技能，相当于大学里的专业。</p><p>这部分固然重要，但是你试想一下，如果一个人，一个自然人，他有了好的人品，好的生活习惯，好的工作习惯。它的技能还会差了吗？</p><p>尤其在中国这个社会发展中，你大学里学的专业，毕业之后未必就做的是相关专业的工作啊？如果那样的话，你去了一家公司，是不是在技能方面要从头开始学习了呢？这里你可能还有一个疑问：既然你的专业不与招聘企业的用人需求相符，为什么企业还愿意录用你呢？答案在前面我已经告诉你了！因为你拥有好的人品，好的习惯。公司很愿意给你机会，让你去学习技能方面的知识。毕竟技能的学习对于公司相对来说，成本比较低！</p><h1 id="职业英语人"><a href="#职业英语人" class="headerlink" title="职业英语人"></a>职业英语人</h1><p>接下来，我要给你介绍一下：我这位认识多年的好友了，她叫孙梅，是一位人品与习惯俱佳的音乐人！<br>不好意思，刚才打错字了，毕竟英语与音乐是如此的容易打错字，那就将错就错吧。<br>她是一位在英语这门语言方面的一位终身学习者和践行者。<br>我不想在介绍我这位好友的方面，占用更多篇幅的文字。<br>我可以负责任的告诉你，她就是符合我这篇文章描述的一个真正意义的人。<br>对，你没有猜错，我就是要给她打广告，～哈哈～<br>因为她终于要开创自己的教育事业了，我和我的以及她的朋友都为此开心不已。</p><h1 id="平述教育平台"><a href="#平述教育平台" class="headerlink" title="平述教育平台"></a>平述教育平台</h1><p>童花树专注于幼儿英语启蒙的教育与研究，提供优质的教育资源，打造寓教于乐的教学平台。</p><h1 id="强宣教育资源"><a href="#强宣教育资源" class="headerlink" title="强宣教育资源"></a>强宣教育资源</h1><p>选择童花树的理由:</p><ul><li>专业的教师资源</li><li>优质的教学和休息环境​</li><li>孩子价值观培养的小课程</li><li>一周一节免费的公益课</li><li>优惠的价格</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;弱谈教育本质&quot;&gt;&lt;a href=&quot;#弱谈教育本质&quot; class=&quot;headerlink&quot; title=&quot;弱谈教育本质&quot;&gt;&lt;/a&gt;弱谈教育本质&lt;/h1&gt;&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="diary" scheme="http://blog.lijunbo.com/categories/diary/"/>
    
    
  </entry>
  
  <entry>
    <title>没有想象的那么难</title>
    <link href="http://blog.lijunbo.com/2018/01/02/day_002/"/>
    <id>http://blog.lijunbo.com/2018/01/02/day_002/</id>
    <published>2018-01-02T10:08:06.000Z</published>
    <updated>2019-10-08T10:39:52.108Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚,凌晨三点还未入眠.</p><p>其中反复的想过今天要做的工作.</p><p>不知道用什么方式去实现.</p><p>我这种生活跟工作分不开的状态很不好.</p><p>然而事情并没有想象的那么难!</p><p>因此,以后,安心睡觉.</p><p>工作的时候,安静思考,沉着编码!</p><p>一切没有想象的那么难!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨晚,凌晨三点还未入眠.&lt;/p&gt;
&lt;p&gt;其中反复的想过今天要做的工作.&lt;/p&gt;
&lt;p&gt;不知道用什么方式去实现.&lt;/p&gt;
&lt;p&gt;我这种生活跟工作分不开的状态很不好.&lt;/p&gt;
&lt;p&gt;然而事情并没有想象的那么难!&lt;/p&gt;
&lt;p&gt;因此,以后,安心睡觉.&lt;/p&gt;
&lt;p&gt;工作的时候,安
      
    
    </summary>
    
      <category term="diary" scheme="http://blog.lijunbo.com/categories/diary/"/>
    
    
  </entry>
  
  <entry>
    <title>不卑不亢</title>
    <link href="http://blog.lijunbo.com/2018/01/01/day_001/"/>
    <id>http://blog.lijunbo.com/2018/01/01/day_001/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2019-10-08T10:39:52.108Z</updated>
    
    <content type="html"><![CDATA[<p>今天通过”吃饺子”事件</p><p>我懂得了</p><p>从容不迫地做事</p><p>不卑不亢地表达.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天通过”吃饺子”事件&lt;/p&gt;
&lt;p&gt;我懂得了&lt;/p&gt;
&lt;p&gt;从容不迫地做事&lt;/p&gt;
&lt;p&gt;不卑不亢地表达.&lt;/p&gt;

      
    
    </summary>
    
      <category term="diary" scheme="http://blog.lijunbo.com/categories/diary/"/>
    
    
  </entry>
  
</feed>
